/**
 * This file is copyright 2017 State of the Netherlands (Ministry of Interior Affairs and Kingdom Relations).
 * It is made available under the terms of the GNU Affero General Public License, version 3 as published by the Free Software Foundation.
 * The project of which this file is part, may be found at https://github.com/MinBZK/operatieBRP.
 */

package nl.bzk.brp.levering.mutatieverwerker.stap;

import static junit.framework.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyList;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import nl.bzk.brp.business.stappen.locking.BsnLocker;
import nl.bzk.brp.dataaccess.repository.AdministratieveHandelingRepository;
import nl.bzk.brp.dataaccess.repository.PersoonHisVolledigRepository;
import nl.bzk.brp.levering.mutatieverwerker.AdministratieveHandelingTestBouwer;
import nl.bzk.brp.levering.mutatieverwerker.model.AdministratieveHandelingMutatie;
import nl.bzk.brp.levering.mutatieverwerker.repository.AdministratieveHandelingVerwerkerRepository;
import nl.bzk.brp.levering.mutatieverwerker.service.AdministratieveHandelingStappenVerwerker;
import nl.bzk.brp.levering.mutatieverwerker.service.AdministratieveHandelingVerwerkingContext;
import nl.bzk.brp.levering.mutatieverwerker.service.AdministratieveHandelingVerwerkingResultaat;
import nl.bzk.brp.levering.mutatieverwerker.service.AdministratieveHandelingVerwerkingStap;
import nl.bzk.brp.levering.mutatieverwerker.stap.util.PersoonConverteerder;
import nl.bzk.brp.model.algemeen.attribuuttype.kern.DatumTijd;
import nl.bzk.brp.model.hisvolledig.kern.PersoonHisVolledig;
import nl.bzk.brp.model.logisch.kern.Persoon;
import nl.bzk.brp.model.operationeel.kern.AdministratieveHandelingModel;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.test.util.ReflectionTestUtils;

@RunWith(MockitoJUnitRunner.class)
public class AlleStappenTest {

    @Mock
    private AdministratieveHandelingRepository administratieveHandelingRepository;

    @Mock
    private AdministratieveHandelingVerwerkerRepository administratieveHandelingVerwerkerRepository;

    @Mock
    private PersoonHisVolledigRepository persoonHisVolledigRepository;

    @Mock
    private PersoonConverteerder persoonConverteerder;

    private AdministratieveHandelingModel administratieveHandelingModel;

    private final AdministratieveHandelingStappenVerwerker administratieveHandelingStappenVerwerker =
            new AdministratieveHandelingStappenVerwerker();

    private final LogAdministratieveHandelingStap         logAdministratieveHandelingStap         =
            new LogAdministratieveHandelingStap();
    private final BetrokkenBsnLockStap                    betrokkenBsnLockStap                    =
            new BetrokkenBsnLockStap();
    private final HaalAdministratieveHandelingOpStap      haalAdministratieveHandelingOpStap      =
            new HaalAdministratieveHandelingOpStap();
    private final HaalBetrokkenPersonenIdsOpStap          haalBetrokkenPersonenIdsOpStap          =
            new HaalBetrokkenPersonenIdsOpStap();
    private final HaalBetrokkenPersonenVolledigOpStap     haalBetrokkenPersonenVolledigOpStap     =
            new HaalBetrokkenPersonenVolledigOpStap();
    private final BepaalBetrokkenPersonenOpPeilmomentStap bepaalBetrokkenPersonenOpPeilmomentStap =
            new BepaalBetrokkenPersonenOpPeilmomentStap();

    private static final Long ADMINISTRATIEVE_HANDELING_ID = 1L;
    private static final int  PERSOON1_ID                  = 123456;
    private static final int  PERSOON2_ID                  = 654321;

    private PersoonHisVolledig       persoonHisVolledig1;
    private PersoonHisVolledig       persoonHisVolledig2;
    private List<PersoonHisVolledig> betrokkenPersonenVolledig;

    private List<String> betrokkenPersonenIds;

    private AdministratieveHandelingMutatie           administratieveHandelingMutatie;
    private AdministratieveHandelingVerwerkingContext administratieveHandelingVerwerkingContext;

    @Before
    public void setup() {
        betrokkenPersonenVolledig = new ArrayList<PersoonHisVolledig>();
        persoonHisVolledig1 = mock(PersoonHisVolledig.class);
        persoonHisVolledig2 = mock(PersoonHisVolledig.class);

        ReflectionTestUtils.setField(persoonHisVolledig1, "iD", PERSOON1_ID);
        ReflectionTestUtils.setField(persoonHisVolledig2, "iD", PERSOON2_ID);
        betrokkenPersonenVolledig.add(persoonHisVolledig1);
        betrokkenPersonenVolledig.add(persoonHisVolledig2);

        betrokkenPersonenIds =
                Arrays.asList(
                        new String[]{String.valueOf(PERSOON1_ID),
                                String.valueOf(PERSOON2_ID)});

        administratieveHandelingModel =
                AdministratieveHandelingTestBouwer.getTestAdministratieveHandeling();

        administratieveHandelingMutatie =
                new AdministratieveHandelingMutatie(ADMINISTRATIEVE_HANDELING_ID, betrokkenPersonenIds);
        administratieveHandelingVerwerkingContext =
                new AdministratieveHandelingVerwerkingContext();

        setupBetrokkenenBsnLockStap();
        setupHaalAdministratieveHandelingOpStap();
        setupHaalBetrokkenPersonenIdsOpStap();
        setupHaalBetrokkenPersonenVolledigOpStap();
        setupBepaalBetrokkenPersonenOpPeilmomentStap();

        final List<AdministratieveHandelingVerwerkingStap> stappen =
                new ArrayList<AdministratieveHandelingVerwerkingStap>();
        stappen.add(betrokkenBsnLockStap);
        stappen.add(haalAdministratieveHandelingOpStap);
        stappen.add(logAdministratieveHandelingStap);
        stappen.add(haalBetrokkenPersonenIdsOpStap);
        stappen.add(haalBetrokkenPersonenVolledigOpStap);
        stappen.add(bepaalBetrokkenPersonenOpPeilmomentStap);

        administratieveHandelingStappenVerwerker.setStappen(stappen);
    }

    private void setupBetrokkenenBsnLockStap() {
        final BsnLocker bsnLocker = mock(BsnLocker.class);
        ReflectionTestUtils.setField(betrokkenBsnLockStap, "bsnLocker",
                bsnLocker);
    }

    private void setupBepaalBetrokkenPersonenOpPeilmomentStap() {
        final Persoon persoon1 = mock(Persoon.class);
        final Persoon persoon2 = mock(Persoon.class);

        final List<Persoon> betrokkenPersonen = new ArrayList<Persoon>();
        betrokkenPersonen.add(persoon1);
        betrokkenPersonen.add(persoon2);

        final DatumTijd peilmoment = administratieveHandelingModel.getTijdstipOntlening();

        when(persoonConverteerder.bepaalBetrokkenPersoonOpPeilmoment(persoonHisVolledig1, peilmoment))
                .thenReturn(persoon1);
        when(persoonConverteerder.bepaalBetrokkenPersoonOpPeilmoment(persoonHisVolledig2, peilmoment))
                .thenReturn(persoon2);

        ReflectionTestUtils.setField(bepaalBetrokkenPersonenOpPeilmomentStap, "persoonConverteerder",
                persoonConverteerder);
    }

    private void setupHaalBetrokkenPersonenVolledigOpStap() {
        when(persoonHisVolledigRepository.haalPersonenOp(eq(Arrays.asList(new Integer[]{PERSOON1_ID, PERSOON2_ID}))))
                .thenReturn(betrokkenPersonenVolledig);
        ReflectionTestUtils.setField(haalBetrokkenPersonenVolledigOpStap, "persoonHisVolledigRepository",
                persoonHisVolledigRepository);
    }

    private void setupHaalBetrokkenPersonenIdsOpStap() {
        when(administratieveHandelingVerwerkerRepository
                .haalAdministratieveHandelingPersoonIds(ADMINISTRATIEVE_HANDELING_ID))
                .thenReturn(Arrays.asList(new Integer[]{PERSOON1_ID, PERSOON2_ID}));
        ReflectionTestUtils.setField(haalBetrokkenPersonenIdsOpStap, "administratieveHandelingVerwerkerRepository",
                administratieveHandelingVerwerkerRepository);
    }

    private void setupHaalAdministratieveHandelingOpStap() {
        when(administratieveHandelingRepository.haalAdministratieveHandeling(ADMINISTRATIEVE_HANDELING_ID))
                .thenReturn(administratieveHandelingModel);
        ReflectionTestUtils.setField(haalAdministratieveHandelingOpStap, "administratieveHandelingRepository",
                administratieveHandelingRepository);
    }

    @Test
    public void testStappenVerwerking() {
        final AdministratieveHandelingVerwerkingResultaat administratieveHandelingVerwerkingResultaat =
                administratieveHandelingStappenVerwerker.verwerk(
                        administratieveHandelingMutatie, administratieveHandelingVerwerkingContext);

        assertTrue(administratieveHandelingVerwerkingResultaat.isSuccesvol());
    }

    @Test
    public void testStappenVerwerkingAdmnistratieveHandelingNietGevonden() {
        when(administratieveHandelingRepository.haalAdministratieveHandeling(ADMINISTRATIEVE_HANDELING_ID))
                .thenReturn(null);

        final AdministratieveHandelingVerwerkingResultaat administratieveHandelingVerwerkingResultaat =
                administratieveHandelingStappenVerwerker.verwerk(
                        administratieveHandelingMutatie, administratieveHandelingVerwerkingContext);

        assertTrue(administratieveHandelingVerwerkingResultaat.isFoutief());
    }

    @Test
    public void testStappenVerwerkingBetrokkenenIdsNietGevonden() {
        when(administratieveHandelingVerwerkerRepository
                .haalAdministratieveHandelingPersoonIds(ADMINISTRATIEVE_HANDELING_ID))
                .thenReturn(null);

        final AdministratieveHandelingVerwerkingResultaat administratieveHandelingVerwerkingResultaat =
                administratieveHandelingStappenVerwerker.verwerk(
                        administratieveHandelingMutatie, administratieveHandelingVerwerkingContext);

        assertTrue(administratieveHandelingVerwerkingResultaat.isFoutief());
    }

    @Test
    public void testStappenVerwerkingPersoonHisVolledigNietGevonden() {
        when(persoonHisVolledigRepository.haalPersonenOp(anyList()))
                .thenReturn(Arrays.asList(new PersoonHisVolledig[]{persoonHisVolledig2}));

        final AdministratieveHandelingVerwerkingResultaat administratieveHandelingVerwerkingResultaat =
                administratieveHandelingStappenVerwerker.verwerk(
                        administratieveHandelingMutatie, administratieveHandelingVerwerkingContext);

        assertTrue(administratieveHandelingVerwerkingResultaat.isFoutief());
    }

    @Test
    public void testStappenVerwerkingPersoonOpPeildatumNietGevonden() {
        when(persoonConverteerder.bepaalBetrokkenPersoonOpPeilmoment(
                any(PersoonHisVolledig.class), any(DatumTijd.class))).thenReturn(null);

        final AdministratieveHandelingVerwerkingResultaat administratieveHandelingVerwerkingResultaat =
                administratieveHandelingStappenVerwerker.verwerk(
                        administratieveHandelingMutatie, administratieveHandelingVerwerkingContext);

        assertTrue(administratieveHandelingVerwerkingResultaat.isFoutief());
    }

}
