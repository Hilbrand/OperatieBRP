/**
 * This file is copyright 2017 State of the Netherlands (Ministry of Interior Affairs and Kingdom Relations).
 * It is made available under the terms of the GNU Affero General Public License, version 3 as published by the Free Software Foundation.
 * The project of which this file is part, may be found at https://github.com/MinBZK/operatieBRP.
 */

package nl.bzk.brp.levering.afnemerindicaties.stappen;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import nl.bzk.brp.levering.afnemerindicaties.service.OnderhoudAfnemerindicatiesBerichtContext;
import nl.bzk.brp.levering.afnemerindicaties.service.OnderhoudAfnemerindicatiesBerichtContextImpl;
import nl.bzk.brp.levering.afnemerindicaties.service.OnderhoudAfnemerindicatiesResultaat;
import nl.bzk.brp.levering.model.Leveringinformatie;
import nl.bzk.brp.model.algemeen.attribuuttype.ber.SysteemNaamAttribuut;
import nl.bzk.brp.model.algemeen.attribuuttype.kern.BurgerservicenummerAttribuut;
import nl.bzk.brp.model.algemeen.attribuuttype.kern.DatumEvtDeelsOnbekendAttribuut;
import nl.bzk.brp.model.algemeen.attribuuttype.kern.ReferentienummerAttribuut;
import nl.bzk.brp.model.algemeen.stamgegeven.autaut.Leveringsautorisatie;
import nl.bzk.brp.model.algemeen.stamgegeven.autaut.TestLeveringsautorisatieBuilder;
import nl.bzk.brp.model.algemeen.stamgegeven.autaut.TestToegangLeveringautorisatieBuilder;
import nl.bzk.brp.model.algemeen.stamgegeven.autaut.ToegangLeveringsautorisatie;
import nl.bzk.brp.model.algemeen.stamgegeven.kern.PartijAttribuut;
import nl.bzk.brp.model.algemeen.stamgegeven.kern.SoortAdministratieveHandeling;
import nl.bzk.brp.model.algemeen.stamgegeven.kern.SoortAdministratieveHandelingAttribuut;
import nl.bzk.brp.model.algemeen.stamgegeven.kern.TestPartijBuilder;
import nl.bzk.brp.model.bericht.autaut.PersoonAfnemerindicatieBericht;
import nl.bzk.brp.model.bericht.autaut.PersoonAfnemerindicatieStandaardGroepBericht;
import nl.bzk.brp.model.bericht.ber.BerichtParametersGroepBericht;
import nl.bzk.brp.model.bericht.ber.BerichtStuurgegevensGroepBericht;
import nl.bzk.brp.model.bericht.kern.ActieBericht;
import nl.bzk.brp.model.bericht.kern.ActieRegistratieAfnemerindicatieBericht;
import nl.bzk.brp.model.bericht.kern.AdministratieveHandelingBericht;
import nl.bzk.brp.model.bericht.kern.HandelingPlaatsingAfnemerindicatieBericht;
import nl.bzk.brp.model.bericht.kern.HandelingVerwijderingAfnemerindicatieBericht;
import nl.bzk.brp.model.bericht.kern.PersoonBericht;
import nl.bzk.brp.model.bericht.kern.PersoonIdentificatienummersGroepBericht;
import nl.bzk.brp.model.hisvolledig.impl.kern.PersoonHisVolledigImpl;
import nl.bzk.brp.model.operationeel.kern.AdministratieveHandelingModel;
import nl.bzk.brp.model.synchronisatie.RegistreerAfnemerindicatieBericht;
import nl.bzk.brp.model.validatie.Melding;
import nl.bzk.brp.util.StatischeObjecttypeBuilder;
import nl.bzk.brp.util.testpersoonbouwers.TestPersoonJohnnyJordaan;
import nl.bzk.brp.webservice.business.stappen.BerichtenIds;
import org.apache.commons.lang.StringUtils;
import org.junit.Before;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;


public abstract class AbstractStappenTest {

    @Spy
    private RegistreerAfnemerindicatieBericht onderwerp = new RegistreerAfnemerindicatieBericht();

    private OnderhoudAfnemerindicatiesBerichtContext berichtContext;

    @Spy
    private OnderhoudAfnemerindicatiesResultaat resultaat =
        new OnderhoudAfnemerindicatiesResultaat(new ArrayList<Melding>(0));

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    /**
     * Maakt een bericht.
     *
     * @param bsn                           the bsn
     * @param leveringinformatie      de leveringsAutorisatie
     * @param zendendePartijId              zendende partij id
     * @param zendendeSysteemNaam           zendende systeem naam
     * @param soortAdministratieveHandeling soort administratieve handeling
     * @param datumAanvMatPeriode           datum aanvang materiele periode
     */
    protected void maakBericht(final Integer bsn, final Leveringinformatie leveringinformatie, final Integer zendendePartijId,
        final String zendendeSysteemNaam, final SoortAdministratieveHandeling soortAdministratieveHandeling,
        final DatumEvtDeelsOnbekendAttribuut datumAanvMatPeriode)
    {
        final PersoonHisVolledigImpl testPersoon = TestPersoonJohnnyJordaan.maak();
        final PartijAttribuut afnemer = StatischeObjecttypeBuilder.bouwPartij(1, "TestPartij1");
        final PartijAttribuut zendendePartij = StatischeObjecttypeBuilder.bouwPartij(zendendePartijId, "TestPartij2");


        final BerichtStuurgegevensGroepBericht stuurgegevens = new BerichtStuurgegevensGroepBericht();
        onderwerp.setStuurgegevens(stuurgegevens);

        final BerichtParametersGroepBericht parameters = new BerichtParametersGroepBericht();
        parameters.setLeveringsautorisatieID(leveringinformatie.getToegangLeveringsautorisatie().getLeveringsautorisatie().getID().toString());
        onderwerp.setParameters(parameters);

        final String zendendePartijCode = StringUtils.leftPad(zendendePartijId.toString(), 6, '0');

        onderwerp.getStuurgegevens().setZendendePartijCode(zendendePartijCode);
        onderwerp.getStuurgegevens().setZendendePartij(
            StatischeObjecttypeBuilder.bouwPartij(zendendePartijId, "TestPartij3"));
        onderwerp.getStuurgegevens().setZendendeSysteem(new SysteemNaamAttribuut(zendendeSysteemNaam));
        onderwerp.getStuurgegevens().setReferentienummer(
            new ReferentienummerAttribuut("000000F-0000-0000-0000-00000000000A"));

        final PersoonBericht persoonBericht = new PersoonBericht();
        final List<PersoonAfnemerindicatieBericht> afnemerindicaties = new ArrayList<>();

        final PersoonAfnemerindicatieBericht afnemerindicatieBericht = new PersoonAfnemerindicatieBericht();
        afnemerindicatieBericht.setAfnemerCode(zendendePartijCode);
        final PersoonAfnemerindicatieStandaardGroepBericht standaardGroep =
            new PersoonAfnemerindicatieStandaardGroepBericht();
        standaardGroep.setDatumAanvangMaterielePeriode(datumAanvMatPeriode);
        afnemerindicatieBericht.setStandaard(standaardGroep);
        afnemerindicatieBericht.setLeveringsautorisatieID(leveringinformatie.getToegangLeveringsautorisatie().
                getLeveringsautorisatie().getID().toString());
        afnemerindicaties.add(afnemerindicatieBericht);

        persoonBericht.setAfnemerindicaties(afnemerindicaties);
        final PersoonIdentificatienummersGroepBericht identificatienummers =
            new PersoonIdentificatienummersGroepBericht();
        identificatienummers.setBurgerservicenummer(new BurgerservicenummerAttribuut(bsn));
        persoonBericht.setIdentificatienummers(identificatienummers);

        AdministratieveHandelingBericht administratieveHandeling = null;

        if (soortAdministratieveHandeling == SoortAdministratieveHandeling.PLAATSING_AFNEMERINDICATIE) {
            administratieveHandeling = new HandelingPlaatsingAfnemerindicatieBericht();
        } else if (soortAdministratieveHandeling == SoortAdministratieveHandeling.VERWIJDERING_AFNEMERINDICATIE) {
            administratieveHandeling = new HandelingVerwijderingAfnemerindicatieBericht();
        }

        final ActieRegistratieAfnemerindicatieBericht actieBericht = new ActieRegistratieAfnemerindicatieBericht();
        actieBericht.setRootObject(persoonBericht);

        administratieveHandeling.setActies(Collections.<ActieBericht>singletonList(actieBericht));

        onderwerp.getStandaard().setAdministratieveHandeling(administratieveHandeling);

        berichtContext = new OnderhoudAfnemerindicatiesBerichtContextImpl(new BerichtenIds(null, null),
            TestPartijBuilder.maker().metCode(zendendePartijId).maak(), onderwerp.getStuurgegevens().getReferentienummer().getWaarde(), null);
        berichtContext.setPersoonHisVolledig(testPersoon);
        berichtContext.setLeveringinformatie(leveringinformatie);
        berichtContext = Mockito.spy(berichtContext);

        berichtContext.setZendendePartij(zendendePartij.getWaarde());
    }

    protected AdministratieveHandelingModel maakAdministratieveHandelingModel() {
        return new AdministratieveHandelingModel(
            new SoortAdministratieveHandelingAttribuut(SoortAdministratieveHandeling.PLAATSING_AFNEMERINDICATIE),
            new PartijAttribuut(berichtContext.getZendendePartij()), null,
            onderwerp.getAdministratieveHandeling().getTijdstipRegistratie()
        );
    }

    public final RegistreerAfnemerindicatieBericht getOnderwerp() {
        return onderwerp;
    }

    public final OnderhoudAfnemerindicatiesBerichtContext getBerichtContext() {
        return berichtContext;
    }

    public final OnderhoudAfnemerindicatiesResultaat getResultaat() {
        return resultaat;
    }

    protected Leveringinformatie maakDummyLeveringinformatie() {
        final Leveringsautorisatie leveringsautorisatie = TestLeveringsautorisatieBuilder.maker().metId(123).maak();
        final ToegangLeveringsautorisatie toegangLeveringsautorisatie = TestToegangLeveringautorisatieBuilder.maker().metLeveringsautorisatie
                (leveringsautorisatie).maak();
        return new Leveringinformatie(toegangLeveringsautorisatie, null);
    }
}
