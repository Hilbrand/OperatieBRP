<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

    <context:property-placeholder system-properties-mode="OVERRIDE" location="classpath*:brp-*.properties"
                                  ignore-resource-not-found="true"/>

    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>

    <context:annotation-config/>
    <context:spring-configured/>

    <context:component-scan base-package="nl.bzk.brp.levering.synchronisatie"/>
    <context:component-scan base-package="nl.bzk.brp.business"/>

    <import resource="jms-beans.xml" />
    <import resource="classpath:business-beans.xml" />
    <import resource="classpath:webservice-basis-beans.xml"/>
    <import resource="classpath:stappen-beans.xml"/>
    <import resource="classpath:jmx-management-beans.xml" />

    <bean id="bedrijfsregelManager" class="nl.bzk.brp.levering.synchronisatie.regels.BedrijfsregelManagerImpl">
        <constructor-arg name="propertiesBestandRegelsVoorBericht" value="regels-voor-bericht.properties"/>
        <constructor-arg name="propertiesBestandRegelsVoorVerwerking" value="regels-voor-verwerking.properties"/>
        <constructor-arg name="propertiesBestandRegelsNaVerwerking" value="regels-na-verwerking.properties"/>
    </bean>

    <bean id="synchronisatieServiceImpl"
          class="nl.bzk.brp.levering.synchronisatie.webservice.SynchronisatieServiceImpl"/>

    <bean id="jibxDatabindingBean" class="org.apache.cxf.jibx.JibxDataBinding"/>

    <jaxws:endpoint id="synchronisatieService" implementor="#synchronisatieServiceImpl"
		    address="/lvgSynchronisatie" xmlns:s="http://www.bzk.nl/brp/levering/synchronisatie/service"
		    serviceName="s:SynchronisatieService" endpointName="s:lvgSynchronisatie">

        <jaxws:dataBinding>
            <ref bean="jibxDatabindingBean"/>
        </jaxws:dataBinding>

        <jaxws:properties>
            <entry key="schema-validation-enabled" value="true"/>
            <entry key="faultStackTraceEnabled" value="false"/>
            <entry key="exceptionMessageCauseEnabled" value="false"/>
        </jaxws:properties>

        <jaxws:inInterceptors>
            <ref bean="archiveringInInterceptor"/>
            <ref bean="schemaInValidator"/>
        </jaxws:inInterceptors>
        <jaxws:inFaultInterceptors>
            <ref bean="archiveringInInterceptor"/>
        </jaxws:inFaultInterceptors>

        <jaxws:outInterceptors>
            <ref bean="wss4jOutInterceptor"/>
            <ref bean="archiveringOutInterceptor"/>
        </jaxws:outInterceptors>
        <jaxws:outFaultInterceptors>
            <ref bean="wss4jOutInterceptor"/>
            <ref bean="archiveringOutInterceptor"/>
        </jaxws:outFaultInterceptors>
    </jaxws:endpoint>

    <bean id="wss4jOutInterceptor" class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
        <constructor-arg>
            <map>
                <entry key="action" value="Timestamp Signature"/>
                <entry key="user" value="${security.privatekey.alias}"/>
                <entry key="signaturePropRefId" value="signatureProperties"/>
                <entry key="signatureProperties">
                    <props>
                        <prop key="org.apache.ws.security.crypto.provider">
                            org.apache.ws.security.components.crypto.Merlin
                        </prop>
                        <prop key="org.apache.ws.security.crypto.merlin.keystore.type">jks</prop>
                        <prop key="org.apache.ws.security.crypto.merlin.keystore.password">${security.keystore.private.password}</prop>
                        <prop key="org.apache.ws.security.crypto.merlin.keystore.alias">${security.privatekey.alias}</prop>
                        <prop key="org.apache.ws.security.crypto.merlin.file">${security.keystore.private.file}</prop>
                    </props>
                </entry>
                <entry key="signatureKeyIdentifier" value="DirectReference"/>
                <!--<entry key="signatureParts" value="{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp;{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body"/>-->
                <entry key="signatureParts"
                       value="{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body;{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp"/>
                <entry key="passwordCallbackRef">
                    <bean class="nl.bzk.brp.webservice.kern.interceptor.helper.ServerPasswordCallback">
                        <property name="password" value="${security.privatekey.password}"/>
                    </bean>
                </entry>
            </map>
        </constructor-arg>
    </bean>
</beans>
