/**
 * This file is copyright 2017 State of the Netherlands (Ministry of Interior Affairs and Kingdom Relations).
 * It is made available under the terms of the GNU Affero General Public License, version 3 as published by the Free Software Foundation.
 * The project of which this file is part, may be found at https://github.com/MinBZK/operatieBRP.
 */

package nl.bzk.brp.levering.mutatielevering.stappen;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import nl.bzk.brp.blobifier.service.BlobifierService;
import nl.bzk.brp.dataaccess.repository.AdministratieveHandelingRepository;
import nl.bzk.brp.levering.algemeen.service.AdministratieveHandelingenOverslaanService;
import nl.bzk.brp.levering.business.stappen.administratievehandeling.AdministratieveHandelingVerwerkingContext;
import nl.bzk.brp.levering.business.stappen.administratievehandeling.AdministratieveHandelingVerwerkingContextImpl;
import nl.bzk.brp.levering.dataaccess.repository.lezenenschrijven.AdministratieveHandelingVerwerkerRepository;
import nl.bzk.brp.levering.mutatielevering.stappen.administratievehandeling.HaalAdministratieveHandelingOpStap;
import nl.bzk.brp.levering.mutatielevering.stappen.administratievehandeling.HaalBijgehoudenPersonenHisVolledigOpStap;
import nl.bzk.brp.levering.mutatielevering.stappen.administratievehandeling.HaalBijgehoudenPersonenIdsOpStap;
import nl.bzk.brp.levering.mutatielevering.stappen.administratievehandeling.LogAdministratieveHandelingStap;
import nl.bzk.brp.levering.mutatielevering.stappen.administratievehandeling.VerifieerAdministratieveHandelingStap;
import nl.bzk.brp.levering.mutatielevering.stappen.context.AdministratieveHandelingMutatie;
import nl.bzk.brp.levering.mutatielevering.stappen.context.AdministratieveHandelingVerwerkingResultaat;
import nl.bzk.brp.logging.MDC;
import nl.bzk.brp.logging.MDCVeld;
import nl.bzk.brp.model.algemeen.stamgegeven.kern.SoortAdministratieveHandeling;
import nl.bzk.brp.model.hisvolledig.impl.kern.PersoonHisVolledigImpl;
import nl.bzk.brp.model.operationeel.kern.AdministratieveHandelingModel;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Matchers;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.test.util.ReflectionTestUtils;

import support.AdministratieveHandelingTestBouwer;

@RunWith(MockitoJUnitRunner.class)
public class AlleStappenTest {

    private static final Long   ADMINISTRATIEVE_HANDELING_ID                   = 1L;
    private static final int    PERSOON1_ID                                    = 123456;
    private static final int    PERSOON2_ID                                    = 654321;
    private static final String ADMINISTRATIEVE_HANDELING_VERWERKER_REPOSITORY = "administratieveHandelingVerwerkerRepository";

    @Mock
    private AdministratieveHandelingRepository administratieveHandelingRepository;

    @Mock
    private AdministratieveHandelingVerwerkerRepository administratieveHandelingVerwerkerRepository;

    @Mock
    private BlobifierService blobifierService;

    @Mock
    private AdministratieveHandelingenOverslaanService administratieveHandelingenOverslaanService;

    private AdministratieveHandelingModel administratieveHandelingModel;

    private final AdministratieveHandelingStappenVerwerker administratieveHandelingStappenVerwerker = new AdministratieveHandelingStappenVerwerker();

    private final LogAdministratieveHandelingStap        logAdministratieveHandelingStap        = new LogAdministratieveHandelingStap();
    private final HaalAdministratieveHandelingOpStap     haalAdministratieveHandelingOpStap     = new HaalAdministratieveHandelingOpStap();
    private final VerifieerAdministratieveHandelingStap  verifieerAdministratieveHandelingStap  = new VerifieerAdministratieveHandelingStap();
    private final HaalBijgehoudenPersonenIdsOpStap       haalBijgehoudenPersonenIdsOpStap       = new HaalBijgehoudenPersonenIdsOpStap();
    private final HaalBijgehoudenPersonenHisVolledigOpStap haalBijgehoudenPersonenHisVolledigOpStap = new HaalBijgehoudenPersonenHisVolledigOpStap();

    private PersoonHisVolledigImpl persoonHisVolledig1;
    private PersoonHisVolledigImpl persoonHisVolledig2;

    private AdministratieveHandelingMutatie           administratieveHandelingMutatie;
    private AdministratieveHandelingVerwerkingContext administratieveHandelingVerwerkingContext;

    @Before
    public final void setup() {
        persoonHisVolledig1 = Mockito.mock(PersoonHisVolledigImpl.class);
        persoonHisVolledig2 = Mockito.mock(PersoonHisVolledigImpl.class);

        Mockito.when(persoonHisVolledig1.getID()).thenReturn(PERSOON1_ID);
        Mockito.when(persoonHisVolledig2.getID()).thenReturn(PERSOON2_ID);

        administratieveHandelingModel =
            AdministratieveHandelingTestBouwer.getTestAdministratieveHandeling();


        administratieveHandelingMutatie =
            new AdministratieveHandelingMutatie(ADMINISTRATIEVE_HANDELING_ID);
        MDC.put(MDCVeld.MDC_ADMINISTRATIEVE_HANDELING, String.valueOf(ADMINISTRATIEVE_HANDELING_ID));
        administratieveHandelingVerwerkingContext = new AdministratieveHandelingVerwerkingContextImpl();

        administratieveHandelingVerwerkingContext.setHuidigeAdministratieveHandeling(administratieveHandelingModel);

        setupHaalAdministratieveHandelingOpStap();
        setupVerifieerAdministratieveHandelingStap();
        setupHaalBijgehoudenPersonenIdsOpStap();
        setupHaalBijgehoudenPersonenVolledigOpStap();

        final List<AdministratieveHandelingVerwerkingStap> stappen =
            new ArrayList<>();
        stappen.add(haalAdministratieveHandelingOpStap);
        stappen.add(haalBijgehoudenPersonenIdsOpStap);
        stappen.add(verifieerAdministratieveHandelingStap);
        stappen.add(logAdministratieveHandelingStap);

        administratieveHandelingStappenVerwerker.setStappen(stappen);
    }

    private void setupHaalBijgehoudenPersonenVolledigOpStap() {
        final List<PersoonHisVolledigImpl> persoonHisVolledigs = new ArrayList<>();
        persoonHisVolledigs.add(persoonHisVolledig1);
        persoonHisVolledigs.add(persoonHisVolledig2);
        Mockito.when(blobifierService.leesBlobs(Mockito.anyListOf(Integer.class))).thenReturn(persoonHisVolledigs);
        ReflectionTestUtils.setField(haalBijgehoudenPersonenHisVolledigOpStap, "blobifierService", blobifierService);
    }

    private void setupHaalBijgehoudenPersonenIdsOpStap() {
        Mockito.when(administratieveHandelingVerwerkerRepository
            .haalAdministratieveHandelingPersoonIds(ADMINISTRATIEVE_HANDELING_ID))
            .thenReturn(Arrays.asList(PERSOON1_ID, PERSOON2_ID));
        ReflectionTestUtils.setField(haalBijgehoudenPersonenIdsOpStap, ADMINISTRATIEVE_HANDELING_VERWERKER_REPOSITORY,
                                     administratieveHandelingVerwerkerRepository);
    }

    private void setupHaalAdministratieveHandelingOpStap() {
        Mockito.when(administratieveHandelingRepository.haalAdministratieveHandeling(ADMINISTRATIEVE_HANDELING_ID))
            .thenReturn(administratieveHandelingModel);
        ReflectionTestUtils.setField(haalAdministratieveHandelingOpStap, "administratieveHandelingRepository",
            administratieveHandelingRepository);
    }

    private void setupVerifieerAdministratieveHandelingStap() {
        Mockito.when(administratieveHandelingVerwerkerRepository
            .magAdministratieveHandelingVerwerktWorden(Matchers.any(AdministratieveHandelingModel.class), Mockito.anyListOf(Integer.class),
                                                       Mockito.anyListOf(SoortAdministratieveHandeling.class))).thenReturn(Boolean.TRUE);

        final List<SoortAdministratieveHandeling> overslaanAdministratievehandelingen = new ArrayList<>();
        Mockito.when(administratieveHandelingenOverslaanService
            .geefLijstVanAdministratieveHandelingDieOvergeslagenMoetenWorden())
            .thenReturn(overslaanAdministratievehandelingen);

        ReflectionTestUtils
            .setField(verifieerAdministratieveHandelingStap, ADMINISTRATIEVE_HANDELING_VERWERKER_REPOSITORY, administratieveHandelingVerwerkerRepository);

        ReflectionTestUtils
            .setField(verifieerAdministratieveHandelingStap, "administratieveHandelingenOverslaanService", administratieveHandelingenOverslaanService);
    }

    @Test
    public final void testStappenVerwerking() {
        final AdministratieveHandelingVerwerkingResultaat administratieveHandelingVerwerkingResultaat =
            administratieveHandelingStappenVerwerker.verwerk(
                administratieveHandelingMutatie, administratieveHandelingVerwerkingContext);

        Assert.assertEquals(administratieveHandelingVerwerkingResultaat.isSuccesvol(), true);
    }

    @Test
    public final void testStappenVerwerkingAdmnistratieveHandelingNietGevonden() {
        Mockito.when(administratieveHandelingRepository.haalAdministratieveHandeling(ADMINISTRATIEVE_HANDELING_ID))
            .thenReturn(null);

        final AdministratieveHandelingVerwerkingResultaat administratieveHandelingVerwerkingResultaat =
            administratieveHandelingStappenVerwerker.verwerk(
                administratieveHandelingMutatie, administratieveHandelingVerwerkingContext);

        Assert.assertTrue(administratieveHandelingVerwerkingResultaat.isFoutief());
    }

    @Test
    public final void testStappenVerwerkingBijgehoudenIdsNietGevonden() {
        Mockito.when(administratieveHandelingVerwerkerRepository
            .haalAdministratieveHandelingPersoonIds(ADMINISTRATIEVE_HANDELING_ID))
            .thenReturn(null);

        final AdministratieveHandelingVerwerkingResultaat administratieveHandelingVerwerkingResultaat =
            administratieveHandelingStappenVerwerker.verwerk(
                administratieveHandelingMutatie, administratieveHandelingVerwerkingContext);

        Assert.assertTrue(administratieveHandelingVerwerkingResultaat.isFoutief());
    }

    @Ignore
    @Test
    public final void testStappenVerwerkingPersoonHisVolledigNietGevonden() {
        final List<PersoonHisVolledigImpl> persoonHisVolledigs = new ArrayList<>();
        persoonHisVolledigs.add(persoonHisVolledig1);
        Mockito.when(blobifierService.leesBlobs(Mockito.anyListOf(Integer.class)))
            .thenReturn(persoonHisVolledigs);

        final AdministratieveHandelingVerwerkingResultaat administratieveHandelingVerwerkingResultaat =
            administratieveHandelingStappenVerwerker.verwerk(
                administratieveHandelingMutatie, administratieveHandelingVerwerkingContext);

        Assert.assertTrue(administratieveHandelingVerwerkingResultaat.isFoutief());
    }

}
