/**
 * This file is copyright 2017 State of the Netherlands (Ministry of Interior Affairs and Kingdom Relations).
 * It is made available under the terms of the GNU Affero General Public License, version 3 as published by the Free Software Foundation.
 * The project of which this file is part, may be found at https://github.com/MinBZK/operatieBRP.
 */

package nl.bzk.brp.model.binding;

import nl.bzk.brp.model.algemeen.attribuuttype.kern.LocatieTenOpzichteVanAdres;

import org.junit.Assert;
import org.junit.Test;


/**
 * Unit test voor de conversie methodes in de (gegenereerde) {@link BindingUtilAttribuutTypen} klasse. Indirect worden
 * hiermee ook de methodes in {@link BindingUtil} getest. Merk op dat er slechts voor enkele methodes tests zijn
 * geschreven, daar de methodes in de {@link BindingUtilAttribuutTypen} klasse worden gegenereerd.
 */
public class BindingUtilAttribuutTypenTest {

    @Test
    public void testANummerConversie() {
        // Test null waardes
        Assert.assertNull(BindingUtilAttribuutTypen.administratienummerNaarXml(null));
        Assert.assertNull(BindingUtilAttribuutTypen.xmlNaarAdministratienummer(null));

        // Test valide conversie zonder voorloopnullen.
        Assert.assertEquals("12345678901", BindingUtilAttribuutTypen.administratienummerNaarXml(12345678901L));
        Assert.assertEquals(Long.valueOf(12345678901L),
                BindingUtilAttribuutTypen.xmlNaarAdministratienummer("12345678901"));

        // Test valide conversie met voorloopnullen.
        Assert.assertEquals("0012345678", BindingUtilAttribuutTypen.administratienummerNaarXml(12345678L));
        Assert.assertEquals(Long.valueOf(12345678L),
                BindingUtilAttribuutTypen.xmlNaarAdministratienummer("0012345678"));
    }

    @Test
    public void testBSNConversie() {
        // Test null waardes
        Assert.assertNull(BindingUtilAttribuutTypen.burgerservicenummerNaarXml(null));
        Assert.assertNull(BindingUtilAttribuutTypen.xmlNaarBurgerservicenummer(null));

        // Test valide conversie zonder voorloopnullen.
        Assert.assertEquals("123456789", BindingUtilAttribuutTypen.burgerservicenummerNaarXml(123456789));
        Assert.assertEquals(Integer.valueOf(123456789),
                BindingUtilAttribuutTypen.xmlNaarBurgerservicenummer("123456789"));

        // Test valide conversie met voorloopnullen.
        Assert.assertEquals("012345678", BindingUtilAttribuutTypen.burgerservicenummerNaarXml(12345678));
        Assert.assertEquals(Integer.valueOf(12345678),
                BindingUtilAttribuutTypen.xmlNaarBurgerservicenummer("012345678"));
    }

    @Test
    public void testLocatieTenOpzichteVanAdresConversie() {
        // Test null waardes
        Assert.assertNull(BindingUtilAttribuutTypen.locatieTenOpzichteVanAdresNaarXml(null));
        Assert.assertNull(BindingUtilAttribuutTypen.xmlNaarLocatieTenOpzichteVanAdres(null));

        // Test alle enumeratiewaardes
        Assert.assertEquals(LocatieTenOpzichteVanAdres.BY,
                BindingUtilAttribuutTypen.xmlNaarLocatieTenOpzichteVanAdres("by"));
        Assert.assertEquals(LocatieTenOpzichteVanAdres.TO,
                BindingUtilAttribuutTypen.xmlNaarLocatieTenOpzichteVanAdres("to"));
        Assert.assertEquals("by",
                BindingUtilAttribuutTypen.locatieTenOpzichteVanAdresNaarXml(LocatieTenOpzichteVanAdres.BY));
        Assert.assertEquals("to",
                BindingUtilAttribuutTypen.locatieTenOpzichteVanAdresNaarXml(LocatieTenOpzichteVanAdres.TO));
    }

}
