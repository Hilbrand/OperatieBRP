<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         				   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      					   http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                           http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

	<context:property-placeholder location="classpath:tools-brp-routering.properties" />

    <!-- This creates an embedded ActiveMQ Broker -->
    <amq:broker id="brpRouteringCentrale"
    			brokerId="brpRouteringCentraleBroker"
    			brokerName="brpRouteringCentrale"

    			advisorySupport="false"
                useJmx="false"
                useShutdownHook="false"
                enableStatistics="true"
                dedicatedTaskRunner="false"

    			persistent="true"
    			dataDirectory="target/brp-activemq-data"

    			schedulerSupport="true"
    			schedulerDirectory="target/brp-activemq-scheduler">

		<amq:destinations>
			<amq:queue physicalName="${queue.gba.archief:GbaArchief}" />
			<amq:queue physicalName="${queue.gba.administratievehandelingen:GbaAdministratieveHandelingen}" />
			<amq:queue physicalName="${queue.gba.afnemerindicaties:GbaAfnemerindicaties}" />
			<amq:queue physicalName="${queue.gba.afnemerindicaties.antwoorden:GbaAfnemerindicatiesAntwoorden}" />
			<amq:queue physicalName="${queue.gba.toevalligegebeurtenissen:GbaToevalligeGebeurtenissen}" />
			<amq:queue physicalName="${queue.gba.toevalligegebeurtenissen.antwoorden:GbaToevalligeGebeurtenissenAntwoorden}" />
		</amq:destinations>

		<!-- How can this broker be reached -->
        <amq:transportConnectors>
            <amq:transportConnector uri="${routering.activemq.url:nio://localhost:61616}"/>
        </amq:transportConnectors>

  		<!-- We don't have any other brokers to connect to -->
    	<amq:networkConnectors>
    	</amq:networkConnectors>

		<!-- How do we persistently store messages -->
        <amq:persistenceAdapter>
            <amq:jdbcPersistenceAdapter dataSource="#dataSourceBrpActiveMQ" lockKeepAlivePeriod="5000" >
            	<amq:locker>
            		<amq:lease-database-locker lockAcquireSleepInterval="5000" />
            	</amq:locker>
            </amq:jdbcPersistenceAdapter>
        </amq:persistenceAdapter>

        <amq:destinationPolicy>
            <amq:policyMap>
                <amq:policyEntries >
                    <amq:policyEntry queue=">" producerFlowControl="true" maxPageSize="50" maxBrowsePageSize="50" maxExpirePageSize="50" >
						<amq:deadLetterStrategy>
							<amq:individualDeadLetterStrategy queuePrefix="" queueSuffix=".dlq" useQueueForQueueMessages="true" />
						</amq:deadLetterStrategy>
                    </amq:policyEntry>
                </amq:policyEntries>
            </amq:policyMap>
        </amq:destinationPolicy>

        <amq:managementContext>
            <amq:managementContext createMBeanServer="false" createConnector="false"  />
        </amq:managementContext>

        <amq:systemUsage >
            <amq:systemUsage sendFailIfNoSpaceAfterTimeout="3000">
                <amq:memoryUsage>
                    <amq:memoryUsage limit="${routering.activemq.memory.usage:64 mb}" />
                </amq:memoryUsage>
                <amq:storeUsage>
                    <amq:storeUsage limit="${routering.activemq.store.usage:1 gb}"/>
                </amq:storeUsage>
                <amq:tempUsage>
                    <amq:tempUsage limit="${routering.activemq.temp.usage:100 mb}"/>
                </amq:tempUsage>
            </amq:systemUsage>
        </amq:systemUsage>

		<amq:plugins>
			<amq:redeliveryPlugin fallbackToDeadLetter="true" sendToDlqIfMaxRetriesExceeded="true">
				<amq:redeliveryPolicyMap>
					<amq:redeliveryPolicyMap>
						<amq:defaultEntry>
							<amq:redeliveryPolicy maximumRedeliveries="2" initialRedeliveryDelay="5000" redeliveryDelay="10000" />
						</amq:defaultEntry>
					</amq:redeliveryPolicyMap>
				</amq:redeliveryPolicyMap>
			</amq:redeliveryPlugin>

			<amq:simpleAuthenticationPlugin anonymousAccessAllowed="true">
			    <amq:users>
			        <amq:authenticationUser username="admin" password="admin" groups="admins"/>
			    </amq:users>
			</amq:simpleAuthenticationPlugin>

			<amq:authorizationPlugin>
				<amq:map>
					<amq:authorizationMap>
						<amq:authorizationEntries>
							<!-- Defaults -->
							<amq:authorizationEntry queue=">" read="admins" write="admins" admin="admins" />
							<amq:authorizationEntry topic=">" read="admins" write="admins" admin="admins" />
							<amq:authorizationEntry topic="ActiveMQ.Advisory.>" read="anonymous" write="anonymous" admin="anonymous"/>

							<amq:authorizationEntry queue="${queue.gba.archief:GbaArchief}" read="anonymous" write="anonymous" admin="admins" />
							<amq:authorizationEntry queue="${queue.gba.administratievehandelingen:GbaAdministratieveHandelingen}" read="anonymous" write="anonymous" admin="admins" />
							<amq:authorizationEntry queue="${queue.gba.afnemerindicaties:GbaAfnemerindicaties}" read="anonymous" write="anonymous" admin="admins" />
							<amq:authorizationEntry queue="${queue.gba.afnemerindicaties.antwoorden:GbaAfnemerindicatiesAntwoorden}" read="anonymous" write="anonymous" admin="admins" />
							<amq:authorizationEntry queue="${queue.gba.toevalligegebeurtenissen:GbaToevalligeGebeurtenissen}" read="anonymous" write="anonymous" admin="admins" />
							<amq:authorizationEntry queue="${queue.gba.toevalligegebeurtenissen.antwoorden:GbaToevalligeGebeurtenissenAntwoorden}" read="anonymous" write="anonymous" admin="admins" />
						</amq:authorizationEntries>
					</amq:authorizationMap>
				</amq:map>
			</amq:authorizationPlugin>
		</amq:plugins>
    </amq:broker>

	<bean id="embeddedDatabaseServer" class="org.hsqldb.server.Server" init-method="start" destroy-method="stop" >
 		<property name="port" value="${database.port:9012}" />
 		<property name="properties">
 			<bean class="org.hsqldb.persist.HsqlProperties">
 				<constructor-arg>
		 			<props>
		 				<prop key="hsqldb.reconfig_logging">false</prop>
		 				<prop key="server.database.0">${database.file:file:target/hsqldb/activemq}</prop>
		 				<prop key="server.dbname.0">${database.name:activemq}</prop>
		 			</props>
 				</constructor-arg>
 			</bean>
 		</property>
 	</bean>

	<bean id="dataSourceBrpActiveMQ" class="org.springframework.jdbc.datasource.DriverManagerDataSource" depends-on="embeddedDatabaseServer">
		<property name="driverClassName" value="${database.driver:org.hsqldb.jdbc.JDBCDriver}" />
		<property name="url" value="${database.url:jdbc:hsqldb:hsql://localhost:9012/activemq}" />
		<property name="username" value="${database.username:sa}" />
		<property name="password" value="${database.password:}" />
	</bean>

</beans>
