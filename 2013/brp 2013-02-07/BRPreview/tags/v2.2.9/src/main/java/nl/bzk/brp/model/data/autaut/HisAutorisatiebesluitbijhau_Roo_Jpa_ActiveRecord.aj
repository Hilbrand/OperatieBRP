// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nl.bzk.brp.model.data.autaut.HisAutorisatiebesluitbijhau;
import org.springframework.transaction.annotation.Transactional;

privileged aspect HisAutorisatiebesluitbijhau_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager HisAutorisatiebesluitbijhau.entityManager;
    
    public static final EntityManager HisAutorisatiebesluitbijhau.entityManager() {
        EntityManager em = new HisAutorisatiebesluitbijhau().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long HisAutorisatiebesluitbijhau.countHisAutorisatiebesluitbijhaus() {
        return entityManager().createQuery("SELECT COUNT(o) FROM HisAutorisatiebesluitbijhau o", Long.class).getSingleResult();
    }
    
    public static List<HisAutorisatiebesluitbijhau> HisAutorisatiebesluitbijhau.findAllHisAutorisatiebesluitbijhaus() {
        return entityManager().createQuery("SELECT o FROM HisAutorisatiebesluitbijhau o", HisAutorisatiebesluitbijhau.class).getResultList();
    }
    
    public static HisAutorisatiebesluitbijhau HisAutorisatiebesluitbijhau.findHisAutorisatiebesluitbijhau(Long id) {
        if (id == null) return null;
        return entityManager().find(HisAutorisatiebesluitbijhau.class, id);
    }
    
    public static List<HisAutorisatiebesluitbijhau> HisAutorisatiebesluitbijhau.findHisAutorisatiebesluitbijhauEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM HisAutorisatiebesluitbijhau o", HisAutorisatiebesluitbijhau.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void HisAutorisatiebesluitbijhau.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void HisAutorisatiebesluitbijhau.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            HisAutorisatiebesluitbijhau attached = HisAutorisatiebesluitbijhau.findHisAutorisatiebesluitbijhau(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void HisAutorisatiebesluitbijhau.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void HisAutorisatiebesluitbijhau.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public HisAutorisatiebesluitbijhau HisAutorisatiebesluitbijhau.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        HisAutorisatiebesluitbijhau merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
