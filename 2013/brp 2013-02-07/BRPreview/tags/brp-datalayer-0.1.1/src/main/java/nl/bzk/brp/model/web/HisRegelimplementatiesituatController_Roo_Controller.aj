// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import nl.bzk.brp.model.data.brm.HisRegelimplementatiesituat;
import nl.bzk.brp.model.data.brm.Regeleffect;
import nl.bzk.brp.model.data.brm.Regelimplementatiesituatie;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.Rdnopschorting;
import nl.bzk.brp.model.data.kern.Verantwoordelijke;
import nl.bzk.brp.model.web.HisRegelimplementatiesituatController;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect HisRegelimplementatiesituatController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String HisRegelimplementatiesituatController.create(@Valid HisRegelimplementatiesituat hisRegelimplementatiesituat, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, hisRegelimplementatiesituat);
            return "hisregelimplementatiesituats/create";
        }
        uiModel.asMap().clear();
        hisRegelimplementatiesituat.persist();
        return "redirect:/hisregelimplementatiesituats/" + encodeUrlPathSegment(hisRegelimplementatiesituat.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String HisRegelimplementatiesituatController.createForm(Model uiModel) {
        populateEditForm(uiModel, new HisRegelimplementatiesituat());
        return "hisregelimplementatiesituats/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String HisRegelimplementatiesituatController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("hisregelimplementatiesituat", HisRegelimplementatiesituat.findHisRegelimplementatiesituat(id));
        uiModel.addAttribute("itemId", id);
        return "hisregelimplementatiesituats/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String HisRegelimplementatiesituatController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("hisregelimplementatiesituats", HisRegelimplementatiesituat.findHisRegelimplementatiesituatEntries(firstResult, sizeNo));
            float nrOfPages = (float) HisRegelimplementatiesituat.countHisRegelimplementatiesituats() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("hisregelimplementatiesituats", HisRegelimplementatiesituat.findAllHisRegelimplementatiesituats());
        }
        addDateTimeFormatPatterns(uiModel);
        return "hisregelimplementatiesituats/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String HisRegelimplementatiesituatController.update(@Valid HisRegelimplementatiesituat hisRegelimplementatiesituat, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, hisRegelimplementatiesituat);
            return "hisregelimplementatiesituats/update";
        }
        uiModel.asMap().clear();
        hisRegelimplementatiesituat.merge();
        return "redirect:/hisregelimplementatiesituats/" + encodeUrlPathSegment(hisRegelimplementatiesituat.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String HisRegelimplementatiesituatController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, HisRegelimplementatiesituat.findHisRegelimplementatiesituat(id));
        return "hisregelimplementatiesituats/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String HisRegelimplementatiesituatController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        HisRegelimplementatiesituat hisRegelimplementatiesituat = HisRegelimplementatiesituat.findHisRegelimplementatiesituat(id);
        hisRegelimplementatiesituat.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/hisregelimplementatiesituats";
    }
    
    void HisRegelimplementatiesituatController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("hisRegelimplementatiesituat_tsreg_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("hisRegelimplementatiesituat_tsverval_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void HisRegelimplementatiesituatController.populateEditForm(Model uiModel, HisRegelimplementatiesituat hisRegelimplementatiesituat) {
        uiModel.addAttribute("hisRegelimplementatiesituat", hisRegelimplementatiesituat);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("regeleffects", Regeleffect.findAllRegeleffects());
        uiModel.addAttribute("regelimplementatiesituaties", Regelimplementatiesituatie.findAllRegelimplementatiesituaties());
        uiModel.addAttribute("acties", Actie.findAllActies());
        uiModel.addAttribute("rdnopschortings", Rdnopschorting.findAllRdnopschortings());
        uiModel.addAttribute("verantwoordelijkes", Verantwoordelijke.findAllVerantwoordelijkes());
    }
    
    String HisRegelimplementatiesituatController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
