// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.HisPersuitslnlkiesr;
import nl.bzk.brp.model.service.PersonService;
import nl.bzk.brp.model.web.HisPersuitslnlkiesrController;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect HisPersuitslnlkiesrController_Roo_Controller {
    
    @Autowired
    PersonService HisPersuitslnlkiesrController.personService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String HisPersuitslnlkiesrController.create(@Valid HisPersuitslnlkiesr hisPersuitslnlkiesr, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, hisPersuitslnlkiesr);
            return "hispersuitslnlkiesrs/create";
        }
        uiModel.asMap().clear();
        hisPersuitslnlkiesr.persist();
        return "redirect:/hispersuitslnlkiesrs/" + encodeUrlPathSegment(hisPersuitslnlkiesr.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String HisPersuitslnlkiesrController.createForm(Model uiModel) {
        populateEditForm(uiModel, new HisPersuitslnlkiesr());
        return "hispersuitslnlkiesrs/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String HisPersuitslnlkiesrController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("hispersuitslnlkiesr", HisPersuitslnlkiesr.findHisPersuitslnlkiesr(id));
        uiModel.addAttribute("itemId", id);
        return "hispersuitslnlkiesrs/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String HisPersuitslnlkiesrController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("hispersuitslnlkiesrs", HisPersuitslnlkiesr.findHisPersuitslnlkiesrEntries(firstResult, sizeNo));
            float nrOfPages = (float) HisPersuitslnlkiesr.countHisPersuitslnlkiesrs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("hispersuitslnlkiesrs", HisPersuitslnlkiesr.findAllHisPersuitslnlkiesrs());
        }
        addDateTimeFormatPatterns(uiModel);
        return "hispersuitslnlkiesrs/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String HisPersuitslnlkiesrController.update(@Valid HisPersuitslnlkiesr hisPersuitslnlkiesr, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, hisPersuitslnlkiesr);
            return "hispersuitslnlkiesrs/update";
        }
        uiModel.asMap().clear();
        hisPersuitslnlkiesr.merge();
        return "redirect:/hispersuitslnlkiesrs/" + encodeUrlPathSegment(hisPersuitslnlkiesr.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String HisPersuitslnlkiesrController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, HisPersuitslnlkiesr.findHisPersuitslnlkiesr(id));
        return "hispersuitslnlkiesrs/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String HisPersuitslnlkiesrController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        HisPersuitslnlkiesr hisPersuitslnlkiesr = HisPersuitslnlkiesr.findHisPersuitslnlkiesr(id);
        hisPersuitslnlkiesr.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/hispersuitslnlkiesrs";
    }
    
    void HisPersuitslnlkiesrController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("hisPersuitslnlkiesr_tsreg_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("hisPersuitslnlkiesr_tsverval_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void HisPersuitslnlkiesrController.populateEditForm(Model uiModel, HisPersuitslnlkiesr hisPersuitslnlkiesr) {
        uiModel.addAttribute("hisPersuitslnlkiesr", hisPersuitslnlkiesr);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("acties", Actie.findAllActies());
        uiModel.addAttribute("perses", personService.findAllPerses());
    }
    
    String HisPersuitslnlkiesrController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
