// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Bijhautorisatie;
import nl.bzk.brp.model.data.autaut.BijhautorisatieDataOnDemand;
import nl.bzk.brp.model.data.autaut.Uitgeslotene;
import nl.bzk.brp.model.data.autaut.UitgesloteneDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UitgesloteneDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UitgesloteneDataOnDemand: @Component;
    
    private Random UitgesloteneDataOnDemand.rnd = new SecureRandom();
    
    private List<Uitgeslotene> UitgesloteneDataOnDemand.data;
    
    @Autowired
    private BijhautorisatieDataOnDemand UitgesloteneDataOnDemand.bijhautorisatieDataOnDemand;
    
    @Autowired
    private PartijDataOnDemand UitgesloteneDataOnDemand.partijDataOnDemand;
    
    public Uitgeslotene UitgesloteneDataOnDemand.getNewTransientUitgeslotene(int index) {
        Uitgeslotene obj = new Uitgeslotene();
        setBijhautorisatie(obj, index);
        setUitgeslotenestatushis(obj, index);
        setUitgeslotenpartij(obj, index);
        return obj;
    }
    
    public void UitgesloteneDataOnDemand.setBijhautorisatie(Uitgeslotene obj, int index) {
        Bijhautorisatie bijhautorisatie = bijhautorisatieDataOnDemand.getRandomBijhautorisatie();
        obj.setBijhautorisatie(bijhautorisatie);
    }
    
    public void UitgesloteneDataOnDemand.setUitgeslotenestatushis(Uitgeslotene obj, int index) {
        String uitgeslotenestatushis = String.valueOf(index);
        if (uitgeslotenestatushis.length() > 1) {
            uitgeslotenestatushis = uitgeslotenestatushis.substring(0, 1);
        }
        obj.setUitgeslotenestatushis(uitgeslotenestatushis);
    }
    
    public void UitgesloteneDataOnDemand.setUitgeslotenpartij(Uitgeslotene obj, int index) {
        Partij uitgeslotenpartij = partijDataOnDemand.getRandomPartij();
        obj.setUitgeslotenpartij(uitgeslotenpartij);
    }
    
    public Uitgeslotene UitgesloteneDataOnDemand.getSpecificUitgeslotene(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Uitgeslotene obj = data.get(index);
        Integer id = obj.getId();
        return Uitgeslotene.findUitgeslotene(id);
    }
    
    public Uitgeslotene UitgesloteneDataOnDemand.getRandomUitgeslotene() {
        init();
        Uitgeslotene obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Uitgeslotene.findUitgeslotene(id);
    }
    
    public boolean UitgesloteneDataOnDemand.modifyUitgeslotene(Uitgeslotene obj) {
        return false;
    }
    
    public void UitgesloteneDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Uitgeslotene.findUitgesloteneEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Uitgeslotene' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Uitgeslotene>();
        for (int i = 0; i < 10; i++) {
            Uitgeslotene obj = getNewTransientUitgeslotene(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
