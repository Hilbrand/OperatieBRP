// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import nl.bzk.brp.model.data.kern.HisGem;
import nl.bzk.brp.model.data.kern.HisGemDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisGemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisGemDataOnDemand: @Component;
    
    private Random HisGemDataOnDemand.rnd = new SecureRandom();
    
    private List<HisGem> HisGemDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisGemDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private PartijDataOnDemand HisGemDataOnDemand.partijDataOnDemand;
    
    public HisGem HisGemDataOnDemand.getNewTransientHisGem(int index) {
        HisGem obj = new HisGem();
        setActieinh(obj, index);
        setActieverval(obj, index);
        setGemcode(obj, index);
        setOnderdeelvan(obj, index);
        setPartij(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        setVoortzettendegem(obj, index);
        return obj;
    }
    
    public void HisGemDataOnDemand.setActieinh(HisGem obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisGemDataOnDemand.setActieverval(HisGem obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisGemDataOnDemand.setGemcode(HisGem obj, int index) {
        String gemcode = "ge_" + index;
        if (gemcode.length() > 4) {
            gemcode = gemcode.substring(0, 4);
        }
        obj.setGemcode(gemcode);
    }
    
    public void HisGemDataOnDemand.setOnderdeelvan(HisGem obj, int index) {
        Partij onderdeelvan = partijDataOnDemand.getRandomPartij();
        obj.setOnderdeelvan(onderdeelvan);
    }
    
    public void HisGemDataOnDemand.setPartij(HisGem obj, int index) {
        Partij partij = partijDataOnDemand.getRandomPartij();
        obj.setPartij(partij);
    }
    
    public void HisGemDataOnDemand.setTsreg(HisGem obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisGemDataOnDemand.setTsverval(HisGem obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public void HisGemDataOnDemand.setVoortzettendegem(HisGem obj, int index) {
        Partij voortzettendegem = partijDataOnDemand.getRandomPartij();
        obj.setVoortzettendegem(voortzettendegem);
    }
    
    public HisGem HisGemDataOnDemand.getSpecificHisGem(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisGem obj = data.get(index);
        Long id = obj.getId();
        return HisGem.findHisGem(id);
    }
    
    public HisGem HisGemDataOnDemand.getRandomHisGem() {
        init();
        HisGem obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisGem.findHisGem(id);
    }
    
    public boolean HisGemDataOnDemand.modifyHisGem(HisGem obj) {
        return false;
    }
    
    public void HisGemDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisGem.findHisGemEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisGem' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisGem>();
        for (int i = 0; i < 10; i++) {
            HisGem obj = getNewTransientHisGem(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
