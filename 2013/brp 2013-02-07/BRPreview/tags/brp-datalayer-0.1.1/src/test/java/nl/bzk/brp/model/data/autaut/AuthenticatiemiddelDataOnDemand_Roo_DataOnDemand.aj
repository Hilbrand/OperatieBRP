// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Authenticatiemiddel;
import nl.bzk.brp.model.data.autaut.AuthenticatiemiddelDataOnDemand;
import nl.bzk.brp.model.data.autaut.Certificaat;
import nl.bzk.brp.model.data.autaut.CertificaatDataOnDemand;
import nl.bzk.brp.model.data.autaut.Functie;
import nl.bzk.brp.model.data.autaut.FunctieDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import nl.bzk.brp.model.data.kern.Rol;
import nl.bzk.brp.model.data.kern.RolDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AuthenticatiemiddelDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AuthenticatiemiddelDataOnDemand: @Component;
    
    private Random AuthenticatiemiddelDataOnDemand.rnd = new SecureRandom();
    
    private List<Authenticatiemiddel> AuthenticatiemiddelDataOnDemand.data;
    
    @Autowired
    private CertificaatDataOnDemand AuthenticatiemiddelDataOnDemand.certificaatDataOnDemand;
    
    @Autowired
    private FunctieDataOnDemand AuthenticatiemiddelDataOnDemand.functieDataOnDemand;
    
    @Autowired
    private PartijDataOnDemand AuthenticatiemiddelDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private RolDataOnDemand AuthenticatiemiddelDataOnDemand.rolDataOnDemand;
    
    public Authenticatiemiddel AuthenticatiemiddelDataOnDemand.getNewTransientAuthenticatiemiddel(int index) {
        Authenticatiemiddel obj = new Authenticatiemiddel();
        setAuthenticatiemiddelstatushis(obj, index);
        setCertificaattbvondertekening(obj, index);
        setCertificaattbvssl(obj, index);
        setFunctie(obj, index);
        setPartij(obj, index);
        setRol(obj, index);
        return obj;
    }
    
    public void AuthenticatiemiddelDataOnDemand.setAuthenticatiemiddelstatushis(Authenticatiemiddel obj, int index) {
        String authenticatiemiddelstatushis = String.valueOf(index);
        if (authenticatiemiddelstatushis.length() > 1) {
            authenticatiemiddelstatushis = authenticatiemiddelstatushis.substring(0, 1);
        }
        obj.setAuthenticatiemiddelstatushis(authenticatiemiddelstatushis);
    }
    
    public void AuthenticatiemiddelDataOnDemand.setCertificaattbvondertekening(Authenticatiemiddel obj, int index) {
        Certificaat certificaattbvondertekening = certificaatDataOnDemand.getRandomCertificaat();
        obj.setCertificaattbvondertekening(certificaattbvondertekening);
    }
    
    public void AuthenticatiemiddelDataOnDemand.setCertificaattbvssl(Authenticatiemiddel obj, int index) {
        Certificaat certificaattbvssl = certificaatDataOnDemand.getRandomCertificaat();
        obj.setCertificaattbvssl(certificaattbvssl);
    }
    
    public void AuthenticatiemiddelDataOnDemand.setFunctie(Authenticatiemiddel obj, int index) {
        Functie functie = functieDataOnDemand.getRandomFunctie();
        obj.setFunctie(functie);
    }
    
    public void AuthenticatiemiddelDataOnDemand.setPartij(Authenticatiemiddel obj, int index) {
        Partij partij = partijDataOnDemand.getRandomPartij();
        obj.setPartij(partij);
    }
    
    public void AuthenticatiemiddelDataOnDemand.setRol(Authenticatiemiddel obj, int index) {
        Rol rol = rolDataOnDemand.getRandomRol();
        obj.setRol(rol);
    }
    
    public Authenticatiemiddel AuthenticatiemiddelDataOnDemand.getSpecificAuthenticatiemiddel(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Authenticatiemiddel obj = data.get(index);
        Integer id = obj.getId();
        return Authenticatiemiddel.findAuthenticatiemiddel(id);
    }
    
    public Authenticatiemiddel AuthenticatiemiddelDataOnDemand.getRandomAuthenticatiemiddel() {
        init();
        Authenticatiemiddel obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Authenticatiemiddel.findAuthenticatiemiddel(id);
    }
    
    public boolean AuthenticatiemiddelDataOnDemand.modifyAuthenticatiemiddel(Authenticatiemiddel obj) {
        return false;
    }
    
    public void AuthenticatiemiddelDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Authenticatiemiddel.findAuthenticatiemiddelEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Authenticatiemiddel' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Authenticatiemiddel>();
        for (int i = 0; i < 10; i++) {
            Authenticatiemiddel obj = getNewTransientAuthenticatiemiddel(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
