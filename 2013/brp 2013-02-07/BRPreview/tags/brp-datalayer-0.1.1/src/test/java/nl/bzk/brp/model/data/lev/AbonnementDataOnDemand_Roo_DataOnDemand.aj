// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.lev;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Doelbinding;
import nl.bzk.brp.model.data.autaut.DoelbindingDataOnDemand;
import nl.bzk.brp.model.data.lev.Abonnement;
import nl.bzk.brp.model.data.lev.AbonnementDataOnDemand;
import nl.bzk.brp.model.data.lev.Srtabonnement;
import nl.bzk.brp.model.data.lev.SrtabonnementDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AbonnementDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AbonnementDataOnDemand: @Component;
    
    private Random AbonnementDataOnDemand.rnd = new SecureRandom();
    
    private List<Abonnement> AbonnementDataOnDemand.data;
    
    @Autowired
    private DoelbindingDataOnDemand AbonnementDataOnDemand.doelbindingDataOnDemand;
    
    @Autowired
    private SrtabonnementDataOnDemand AbonnementDataOnDemand.srtabonnementDataOnDemand;
    
    public Abonnement AbonnementDataOnDemand.getNewTransientAbonnement(int index) {
        Abonnement obj = new Abonnement();
        setAbonnementstatushis(obj, index);
        setDoelbinding(obj, index);
        setPopulatiecriterium(obj, index);
        setSrtabonnement(obj, index);
        return obj;
    }
    
    public void AbonnementDataOnDemand.setAbonnementstatushis(Abonnement obj, int index) {
        String abonnementstatushis = String.valueOf(index);
        if (abonnementstatushis.length() > 1) {
            abonnementstatushis = abonnementstatushis.substring(0, 1);
        }
        obj.setAbonnementstatushis(abonnementstatushis);
    }
    
    public void AbonnementDataOnDemand.setDoelbinding(Abonnement obj, int index) {
        Doelbinding doelbinding = doelbindingDataOnDemand.getRandomDoelbinding();
        obj.setDoelbinding(doelbinding);
    }
    
    public void AbonnementDataOnDemand.setPopulatiecriterium(Abonnement obj, int index) {
        String populatiecriterium = "populatiecriterium_" + index;
        obj.setPopulatiecriterium(populatiecriterium);
    }
    
    public void AbonnementDataOnDemand.setSrtabonnement(Abonnement obj, int index) {
        Srtabonnement srtabonnement = srtabonnementDataOnDemand.getRandomSrtabonnement();
        obj.setSrtabonnement(srtabonnement);
    }
    
    public Abonnement AbonnementDataOnDemand.getSpecificAbonnement(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Abonnement obj = data.get(index);
        Integer id = obj.getId();
        return Abonnement.findAbonnement(id);
    }
    
    public Abonnement AbonnementDataOnDemand.getRandomAbonnement() {
        init();
        Abonnement obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Abonnement.findAbonnement(id);
    }
    
    public boolean AbonnementDataOnDemand.modifyAbonnement(Abonnement obj) {
        return false;
    }
    
    public void AbonnementDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Abonnement.findAbonnementEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Abonnement' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Abonnement>();
        for (int i = 0; i < 10; i++) {
            Abonnement obj = getNewTransientAbonnement(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
