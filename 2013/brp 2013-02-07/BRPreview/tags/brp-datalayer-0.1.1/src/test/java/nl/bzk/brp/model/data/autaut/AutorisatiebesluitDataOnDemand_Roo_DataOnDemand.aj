// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Autorisatiebesluit;
import nl.bzk.brp.model.data.autaut.AutorisatiebesluitDataOnDemand;
import nl.bzk.brp.model.data.autaut.Srtautorisatiebesluit;
import nl.bzk.brp.model.data.autaut.SrtautorisatiebesluitDataOnDemand;
import nl.bzk.brp.model.data.autaut.Toestand;
import nl.bzk.brp.model.data.autaut.ToestandDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AutorisatiebesluitDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AutorisatiebesluitDataOnDemand: @Component;
    
    private Random AutorisatiebesluitDataOnDemand.rnd = new SecureRandom();
    
    private List<Autorisatiebesluit> AutorisatiebesluitDataOnDemand.data;
    
    @Autowired
    private PartijDataOnDemand AutorisatiebesluitDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private SrtautorisatiebesluitDataOnDemand AutorisatiebesluitDataOnDemand.srtautorisatiebesluitDataOnDemand;
    
    @Autowired
    private ToestandDataOnDemand AutorisatiebesluitDataOnDemand.toestandDataOnDemand;
    
    public Autorisatiebesluit AutorisatiebesluitDataOnDemand.getNewTransientAutorisatiebesluit(int index) {
        Autorisatiebesluit obj = new Autorisatiebesluit();
        setAutorisatiebesluitstatushis(obj, index);
        setAutoriseerder(obj, index);
        setBesluittekst(obj, index);
        setBijhautorisatiebesluitstatus(obj, index);
        setDatbesluit(obj, index);
        setDateinde(obj, index);
        setDatingang(obj, index);
        setGebaseerdop(obj, index);
        setIndingetrokken(obj, index);
        setIndmodelbesluit(obj, index);
        setSrt(obj, index);
        setToestand(obj, index);
        return obj;
    }
    
    public void AutorisatiebesluitDataOnDemand.setAutorisatiebesluitstatushis(Autorisatiebesluit obj, int index) {
        String autorisatiebesluitstatushis = String.valueOf(index);
        if (autorisatiebesluitstatushis.length() > 1) {
            autorisatiebesluitstatushis = autorisatiebesluitstatushis.substring(0, 1);
        }
        obj.setAutorisatiebesluitstatushis(autorisatiebesluitstatushis);
    }
    
    public void AutorisatiebesluitDataOnDemand.setAutoriseerder(Autorisatiebesluit obj, int index) {
        Partij autoriseerder = partijDataOnDemand.getRandomPartij();
        obj.setAutoriseerder(autoriseerder);
    }
    
    public void AutorisatiebesluitDataOnDemand.setBesluittekst(Autorisatiebesluit obj, int index) {
        String besluittekst = "besluittekst_" + index;
        obj.setBesluittekst(besluittekst);
    }
    
    public void AutorisatiebesluitDataOnDemand.setBijhautorisatiebesluitstatus(Autorisatiebesluit obj, int index) {
        String bijhautorisatiebesluitstatus = String.valueOf(index);
        if (bijhautorisatiebesluitstatus.length() > 1) {
            bijhautorisatiebesluitstatus = bijhautorisatiebesluitstatus.substring(0, 1);
        }
        obj.setBijhautorisatiebesluitstatus(bijhautorisatiebesluitstatus);
    }
    
    public void AutorisatiebesluitDataOnDemand.setDatbesluit(Autorisatiebesluit obj, int index) {
        BigDecimal datbesluit = BigDecimal.valueOf(index);
        obj.setDatbesluit(datbesluit);
    }
    
    public void AutorisatiebesluitDataOnDemand.setDateinde(Autorisatiebesluit obj, int index) {
        BigDecimal dateinde = BigDecimal.valueOf(index);
        obj.setDateinde(dateinde);
    }
    
    public void AutorisatiebesluitDataOnDemand.setDatingang(Autorisatiebesluit obj, int index) {
        BigDecimal datingang = BigDecimal.valueOf(index);
        obj.setDatingang(datingang);
    }
    
    public void AutorisatiebesluitDataOnDemand.setGebaseerdop(Autorisatiebesluit obj, int index) {
        Autorisatiebesluit gebaseerdop = obj;
        obj.setGebaseerdop(gebaseerdop);
    }
    
    public void AutorisatiebesluitDataOnDemand.setIndingetrokken(Autorisatiebesluit obj, int index) {
        Boolean indingetrokken = Boolean.TRUE;
        obj.setIndingetrokken(indingetrokken);
    }
    
    public void AutorisatiebesluitDataOnDemand.setIndmodelbesluit(Autorisatiebesluit obj, int index) {
        Boolean indmodelbesluit = true;
        obj.setIndmodelbesluit(indmodelbesluit);
    }
    
    public void AutorisatiebesluitDataOnDemand.setSrt(Autorisatiebesluit obj, int index) {
        Srtautorisatiebesluit srt = srtautorisatiebesluitDataOnDemand.getRandomSrtautorisatiebesluit();
        obj.setSrt(srt);
    }
    
    public void AutorisatiebesluitDataOnDemand.setToestand(Autorisatiebesluit obj, int index) {
        Toestand toestand = toestandDataOnDemand.getRandomToestand();
        obj.setToestand(toestand);
    }
    
    public Autorisatiebesluit AutorisatiebesluitDataOnDemand.getSpecificAutorisatiebesluit(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Autorisatiebesluit obj = data.get(index);
        Integer id = obj.getId();
        return Autorisatiebesluit.findAutorisatiebesluit(id);
    }
    
    public Autorisatiebesluit AutorisatiebesluitDataOnDemand.getRandomAutorisatiebesluit() {
        init();
        Autorisatiebesluit obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Autorisatiebesluit.findAutorisatiebesluit(id);
    }
    
    public boolean AutorisatiebesluitDataOnDemand.modifyAutorisatiebesluit(Autorisatiebesluit obj) {
        return false;
    }
    
    public void AutorisatiebesluitDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Autorisatiebesluit.findAutorisatiebesluitEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Autorisatiebesluit' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Autorisatiebesluit>();
        for (int i = 0; i < 10; i++) {
            Autorisatiebesluit obj = getNewTransientAutorisatiebesluit(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
