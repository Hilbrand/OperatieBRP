// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import nl.bzk.brp.model.data.kern.Partijrol;
import nl.bzk.brp.model.data.kern.PartijrolDataOnDemand;
import nl.bzk.brp.model.data.kern.Rol;
import nl.bzk.brp.model.data.kern.RolDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PartijrolDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PartijrolDataOnDemand: @Component;
    
    private Random PartijrolDataOnDemand.rnd = new SecureRandom();
    
    private List<Partijrol> PartijrolDataOnDemand.data;
    
    @Autowired
    private PartijDataOnDemand PartijrolDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private RolDataOnDemand PartijrolDataOnDemand.rolDataOnDemand;
    
    public Partijrol PartijrolDataOnDemand.getNewTransientPartijrol(int index) {
        Partijrol obj = new Partijrol();
        setPartij(obj, index);
        setPartijrolstatushis(obj, index);
        setRol(obj, index);
        return obj;
    }
    
    public void PartijrolDataOnDemand.setPartij(Partijrol obj, int index) {
        Partij partij = partijDataOnDemand.getRandomPartij();
        obj.setPartij(partij);
    }
    
    public void PartijrolDataOnDemand.setPartijrolstatushis(Partijrol obj, int index) {
        String partijrolstatushis = String.valueOf(index);
        if (partijrolstatushis.length() > 1) {
            partijrolstatushis = partijrolstatushis.substring(0, 1);
        }
        obj.setPartijrolstatushis(partijrolstatushis);
    }
    
    public void PartijrolDataOnDemand.setRol(Partijrol obj, int index) {
        Rol rol = rolDataOnDemand.getRandomRol();
        obj.setRol(rol);
    }
    
    public Partijrol PartijrolDataOnDemand.getSpecificPartijrol(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Partijrol obj = data.get(index);
        Integer id = obj.getId();
        return Partijrol.findPartijrol(id);
    }
    
    public Partijrol PartijrolDataOnDemand.getRandomPartijrol() {
        init();
        Partijrol obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Partijrol.findPartijrol(id);
    }
    
    public boolean PartijrolDataOnDemand.modifyPartijrol(Partijrol obj) {
        return false;
    }
    
    public void PartijrolDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Partijrol.findPartijrolEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Partijrol' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Partijrol>();
        for (int i = 0; i < 10; i++) {
            Partijrol obj = getNewTransientPartijrol(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
