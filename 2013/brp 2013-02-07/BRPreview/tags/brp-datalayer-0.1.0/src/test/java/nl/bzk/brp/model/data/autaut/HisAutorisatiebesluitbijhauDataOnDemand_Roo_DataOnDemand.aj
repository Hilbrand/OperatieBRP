// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Autorisatiebesluit;
import nl.bzk.brp.model.data.autaut.AutorisatiebesluitDataOnDemand;
import nl.bzk.brp.model.data.autaut.HisAutorisatiebesluitbijhau;
import nl.bzk.brp.model.data.autaut.HisAutorisatiebesluitbijhauDataOnDemand;
import nl.bzk.brp.model.data.autaut.Toestand;
import nl.bzk.brp.model.data.autaut.ToestandDataOnDemand;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisAutorisatiebesluitbijhauDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisAutorisatiebesluitbijhauDataOnDemand: @Component;
    
    private Random HisAutorisatiebesluitbijhauDataOnDemand.rnd = new SecureRandom();
    
    private List<HisAutorisatiebesluitbijhau> HisAutorisatiebesluitbijhauDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisAutorisatiebesluitbijhauDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private AutorisatiebesluitDataOnDemand HisAutorisatiebesluitbijhauDataOnDemand.autorisatiebesluitDataOnDemand;
    
    @Autowired
    private ToestandDataOnDemand HisAutorisatiebesluitbijhauDataOnDemand.toestandDataOnDemand;
    
    public HisAutorisatiebesluitbijhau HisAutorisatiebesluitbijhauDataOnDemand.getNewTransientHisAutorisatiebesluitbijhau(int index) {
        HisAutorisatiebesluitbijhau obj = new HisAutorisatiebesluitbijhau();
        setActieinh(obj, index);
        setActieverval(obj, index);
        setAutorisatiebesluit(obj, index);
        setToestand(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        return obj;
    }
    
    public void HisAutorisatiebesluitbijhauDataOnDemand.setActieinh(HisAutorisatiebesluitbijhau obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisAutorisatiebesluitbijhauDataOnDemand.setActieverval(HisAutorisatiebesluitbijhau obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisAutorisatiebesluitbijhauDataOnDemand.setAutorisatiebesluit(HisAutorisatiebesluitbijhau obj, int index) {
        Autorisatiebesluit autorisatiebesluit = autorisatiebesluitDataOnDemand.getRandomAutorisatiebesluit();
        obj.setAutorisatiebesluit(autorisatiebesluit);
    }
    
    public void HisAutorisatiebesluitbijhauDataOnDemand.setToestand(HisAutorisatiebesluitbijhau obj, int index) {
        Toestand toestand = toestandDataOnDemand.getRandomToestand();
        obj.setToestand(toestand);
    }
    
    public void HisAutorisatiebesluitbijhauDataOnDemand.setTsreg(HisAutorisatiebesluitbijhau obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisAutorisatiebesluitbijhauDataOnDemand.setTsverval(HisAutorisatiebesluitbijhau obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public HisAutorisatiebesluitbijhau HisAutorisatiebesluitbijhauDataOnDemand.getSpecificHisAutorisatiebesluitbijhau(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisAutorisatiebesluitbijhau obj = data.get(index);
        Long id = obj.getId();
        return HisAutorisatiebesluitbijhau.findHisAutorisatiebesluitbijhau(id);
    }
    
    public HisAutorisatiebesluitbijhau HisAutorisatiebesluitbijhauDataOnDemand.getRandomHisAutorisatiebesluitbijhau() {
        init();
        HisAutorisatiebesluitbijhau obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisAutorisatiebesluitbijhau.findHisAutorisatiebesluitbijhau(id);
    }
    
    public boolean HisAutorisatiebesluitbijhauDataOnDemand.modifyHisAutorisatiebesluitbijhau(HisAutorisatiebesluitbijhau obj) {
        return false;
    }
    
    public void HisAutorisatiebesluitbijhauDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisAutorisatiebesluitbijhau.findHisAutorisatiebesluitbijhauEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisAutorisatiebesluitbijhau' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisAutorisatiebesluitbijhau>();
        for (int i = 0; i < 10; i++) {
            HisAutorisatiebesluitbijhau obj = getNewTransientHisAutorisatiebesluitbijhau(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
