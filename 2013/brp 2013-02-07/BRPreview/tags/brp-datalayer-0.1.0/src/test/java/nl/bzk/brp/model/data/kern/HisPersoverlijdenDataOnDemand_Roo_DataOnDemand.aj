// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import nl.bzk.brp.model.data.kern.HisPersoverlijden;
import nl.bzk.brp.model.data.kern.HisPersoverlijdenDataOnDemand;
import nl.bzk.brp.model.data.kern.Land;
import nl.bzk.brp.model.data.kern.LandDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import nl.bzk.brp.model.data.kern.Plaats;
import nl.bzk.brp.model.data.kern.PlaatsDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisPersoverlijdenDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisPersoverlijdenDataOnDemand: @Component;
    
    private Random HisPersoverlijdenDataOnDemand.rnd = new SecureRandom();
    
    private List<HisPersoverlijden> HisPersoverlijdenDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisPersoverlijdenDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private PartijDataOnDemand HisPersoverlijdenDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private LandDataOnDemand HisPersoverlijdenDataOnDemand.landDataOnDemand;
    
    @Autowired
    private PersDataOnDemand HisPersoverlijdenDataOnDemand.persDataOnDemand;
    
    @Autowired
    private PlaatsDataOnDemand HisPersoverlijdenDataOnDemand.plaatsDataOnDemand;
    
    public HisPersoverlijden HisPersoverlijdenDataOnDemand.getNewTransientHisPersoverlijden(int index) {
        HisPersoverlijden obj = new HisPersoverlijden();
        setActieinh(obj, index);
        setActieverval(obj, index);
        setBlplaatsoverlijden(obj, index);
        setBlregiooverlijden(obj, index);
        setDatoverlijden(obj, index);
        setGemoverlijden(obj, index);
        setLandoverlijden(obj, index);
        setOmslocoverlijden(obj, index);
        setPers(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        setWploverlijden(obj, index);
        return obj;
    }
    
    public void HisPersoverlijdenDataOnDemand.setActieinh(HisPersoverlijden obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisPersoverlijdenDataOnDemand.setActieverval(HisPersoverlijden obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisPersoverlijdenDataOnDemand.setBlplaatsoverlijden(HisPersoverlijden obj, int index) {
        String blplaatsoverlijden = "blplaatsoverlijden_" + index;
        if (blplaatsoverlijden.length() > 40) {
            blplaatsoverlijden = blplaatsoverlijden.substring(0, 40);
        }
        obj.setBlplaatsoverlijden(blplaatsoverlijden);
    }
    
    public void HisPersoverlijdenDataOnDemand.setBlregiooverlijden(HisPersoverlijden obj, int index) {
        String blregiooverlijden = "blregiooverlijden_" + index;
        if (blregiooverlijden.length() > 35) {
            blregiooverlijden = blregiooverlijden.substring(0, 35);
        }
        obj.setBlregiooverlijden(blregiooverlijden);
    }
    
    public void HisPersoverlijdenDataOnDemand.setDatoverlijden(HisPersoverlijden obj, int index) {
        BigDecimal datoverlijden = BigDecimal.valueOf(index);
        obj.setDatoverlijden(datoverlijden);
    }
    
    public void HisPersoverlijdenDataOnDemand.setGemoverlijden(HisPersoverlijden obj, int index) {
        Partij gemoverlijden = partijDataOnDemand.getRandomPartij();
        obj.setGemoverlijden(gemoverlijden);
    }
    
    public void HisPersoverlijdenDataOnDemand.setLandoverlijden(HisPersoverlijden obj, int index) {
        Land landoverlijden = landDataOnDemand.getRandomLand();
        obj.setLandoverlijden(landoverlijden);
    }
    
    public void HisPersoverlijdenDataOnDemand.setOmslocoverlijden(HisPersoverlijden obj, int index) {
        String omslocoverlijden = "omslocoverlijden_" + index;
        if (omslocoverlijden.length() > 40) {
            omslocoverlijden = omslocoverlijden.substring(0, 40);
        }
        obj.setOmslocoverlijden(omslocoverlijden);
    }
    
    public void HisPersoverlijdenDataOnDemand.setPers(HisPersoverlijden obj, int index) {
        Pers pers = persDataOnDemand.getRandomPers();
        obj.setPers(pers);
    }
    
    public void HisPersoverlijdenDataOnDemand.setTsreg(HisPersoverlijden obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisPersoverlijdenDataOnDemand.setTsverval(HisPersoverlijden obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public void HisPersoverlijdenDataOnDemand.setWploverlijden(HisPersoverlijden obj, int index) {
        Plaats wploverlijden = plaatsDataOnDemand.getRandomPlaats();
        obj.setWploverlijden(wploverlijden);
    }
    
    public HisPersoverlijden HisPersoverlijdenDataOnDemand.getSpecificHisPersoverlijden(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisPersoverlijden obj = data.get(index);
        Long id = obj.getId();
        return HisPersoverlijden.findHisPersoverlijden(id);
    }
    
    public HisPersoverlijden HisPersoverlijdenDataOnDemand.getRandomHisPersoverlijden() {
        init();
        HisPersoverlijden obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisPersoverlijden.findHisPersoverlijden(id);
    }
    
    public boolean HisPersoverlijdenDataOnDemand.modifyHisPersoverlijden(HisPersoverlijden obj) {
        return false;
    }
    
    public void HisPersoverlijdenDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisPersoverlijden.findHisPersoverlijdenEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisPersoverlijden' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisPersoverlijden>();
        for (int i = 0; i < 10; i++) {
            HisPersoverlijden obj = getNewTransientHisPersoverlijden(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
