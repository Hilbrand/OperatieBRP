// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import nl.bzk.brp.model.data.kern.Betr;
import nl.bzk.brp.model.data.kern.BetrDataOnDemand;
import nl.bzk.brp.model.data.kern.HisBetrouder;
import nl.bzk.brp.model.data.kern.HisBetrouderDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisBetrouderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisBetrouderDataOnDemand: @Component;
    
    private Random HisBetrouderDataOnDemand.rnd = new SecureRandom();
    
    private List<HisBetrouder> HisBetrouderDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisBetrouderDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private BetrDataOnDemand HisBetrouderDataOnDemand.betrDataOnDemand;
    
    public HisBetrouder HisBetrouderDataOnDemand.getNewTransientHisBetrouder(int index) {
        HisBetrouder obj = new HisBetrouder();
        setActieaanpgel(obj, index);
        setActieinh(obj, index);
        setActieverval(obj, index);
        setBetr(obj, index);
        setDataanvgel(obj, index);
        setDateindegel(obj, index);
        setIndouder(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        return obj;
    }
    
    public void HisBetrouderDataOnDemand.setActieaanpgel(HisBetrouder obj, int index) {
        Actie actieaanpgel = actieDataOnDemand.getRandomActie();
        obj.setActieaanpgel(actieaanpgel);
    }
    
    public void HisBetrouderDataOnDemand.setActieinh(HisBetrouder obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisBetrouderDataOnDemand.setActieverval(HisBetrouder obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisBetrouderDataOnDemand.setBetr(HisBetrouder obj, int index) {
        Betr betr = betrDataOnDemand.getRandomBetr();
        obj.setBetr(betr);
    }
    
    public void HisBetrouderDataOnDemand.setDataanvgel(HisBetrouder obj, int index) {
        BigDecimal dataanvgel = BigDecimal.valueOf(index);
        obj.setDataanvgel(dataanvgel);
    }
    
    public void HisBetrouderDataOnDemand.setDateindegel(HisBetrouder obj, int index) {
        BigDecimal dateindegel = BigDecimal.valueOf(index);
        obj.setDateindegel(dateindegel);
    }
    
    public void HisBetrouderDataOnDemand.setIndouder(HisBetrouder obj, int index) {
        Boolean indouder = true;
        obj.setIndouder(indouder);
    }
    
    public void HisBetrouderDataOnDemand.setTsreg(HisBetrouder obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisBetrouderDataOnDemand.setTsverval(HisBetrouder obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public HisBetrouder HisBetrouderDataOnDemand.getSpecificHisBetrouder(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisBetrouder obj = data.get(index);
        Long id = obj.getId();
        return HisBetrouder.findHisBetrouder(id);
    }
    
    public HisBetrouder HisBetrouderDataOnDemand.getRandomHisBetrouder() {
        init();
        HisBetrouder obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisBetrouder.findHisBetrouder(id);
    }
    
    public boolean HisBetrouderDataOnDemand.modifyHisBetrouder(HisBetrouder obj) {
        return false;
    }
    
    public void HisBetrouderDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisBetrouder.findHisBetrouderEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisBetrouder' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisBetrouder>();
        for (int i = 0; i < 10; i++) {
            HisBetrouder obj = getNewTransientHisBetrouder(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
