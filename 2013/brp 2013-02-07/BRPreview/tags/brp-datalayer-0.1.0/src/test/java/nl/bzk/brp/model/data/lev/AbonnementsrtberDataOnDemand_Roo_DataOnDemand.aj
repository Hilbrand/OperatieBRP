// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.lev;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.lev.Abonnement;
import nl.bzk.brp.model.data.lev.AbonnementDataOnDemand;
import nl.bzk.brp.model.data.lev.Abonnementsrtber;
import nl.bzk.brp.model.data.lev.AbonnementsrtberDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AbonnementsrtberDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AbonnementsrtberDataOnDemand: @Component;
    
    private Random AbonnementsrtberDataOnDemand.rnd = new SecureRandom();
    
    private List<Abonnementsrtber> AbonnementsrtberDataOnDemand.data;
    
    @Autowired
    private AbonnementDataOnDemand AbonnementsrtberDataOnDemand.abonnementDataOnDemand;
    
    public Abonnementsrtber AbonnementsrtberDataOnDemand.getNewTransientAbonnementsrtber(int index) {
        Abonnementsrtber obj = new Abonnementsrtber();
        setAbonnement(obj, index);
        setAbonnementsrtberstatushis(obj, index);
        return obj;
    }
    
    public void AbonnementsrtberDataOnDemand.setAbonnement(Abonnementsrtber obj, int index) {
        Abonnement abonnement = abonnementDataOnDemand.getRandomAbonnement();
        obj.setAbonnement(abonnement);
    }
    
    public void AbonnementsrtberDataOnDemand.setAbonnementsrtberstatushis(Abonnementsrtber obj, int index) {
        String abonnementsrtberstatushis = String.valueOf(index);
        if (abonnementsrtberstatushis.length() > 1) {
            abonnementsrtberstatushis = abonnementsrtberstatushis.substring(0, 1);
        }
        obj.setAbonnementsrtberstatushis(abonnementsrtberstatushis);
    }
    
    public Abonnementsrtber AbonnementsrtberDataOnDemand.getSpecificAbonnementsrtber(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Abonnementsrtber obj = data.get(index);
        Integer id = obj.getId();
        return Abonnementsrtber.findAbonnementsrtber(id);
    }
    
    public Abonnementsrtber AbonnementsrtberDataOnDemand.getRandomAbonnementsrtber() {
        init();
        Abonnementsrtber obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Abonnementsrtber.findAbonnementsrtber(id);
    }
    
    public boolean AbonnementsrtberDataOnDemand.modifyAbonnementsrtber(Abonnementsrtber obj) {
        return false;
    }
    
    public void AbonnementsrtberDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Abonnementsrtber.findAbonnementsrtberEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Abonnementsrtber' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Abonnementsrtber>();
        for (int i = 0; i < 10; i++) {
            Abonnementsrtber obj = getNewTransientAbonnementsrtber(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
