// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Land;
import nl.bzk.brp.model.data.kern.LandDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import nl.bzk.brp.model.data.kern.Plaats;
import nl.bzk.brp.model.data.kern.PlaatsDataOnDemand;
import nl.bzk.brp.model.data.kern.Rdnbeeindrelatie;
import nl.bzk.brp.model.data.kern.RdnbeeindrelatieDataOnDemand;
import nl.bzk.brp.model.data.kern.Relatie;
import nl.bzk.brp.model.data.kern.RelatieDataOnDemand;
import nl.bzk.brp.model.data.kern.Srtrelatie;
import nl.bzk.brp.model.data.kern.SrtrelatieDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RelatieDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RelatieDataOnDemand: @Component;
    
    private Random RelatieDataOnDemand.rnd = new SecureRandom();
    
    private List<Relatie> RelatieDataOnDemand.data;
    
    @Autowired
    private PartijDataOnDemand RelatieDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private LandDataOnDemand RelatieDataOnDemand.landDataOnDemand;
    
    @Autowired
    private RdnbeeindrelatieDataOnDemand RelatieDataOnDemand.rdnbeeindrelatieDataOnDemand;
    
    @Autowired
    private SrtrelatieDataOnDemand RelatieDataOnDemand.srtrelatieDataOnDemand;
    
    @Autowired
    private PlaatsDataOnDemand RelatieDataOnDemand.plaatsDataOnDemand;
    
    public Relatie RelatieDataOnDemand.getNewTransientRelatie(int index) {
        Relatie obj = new Relatie();
        setBlplaatsaanv(obj, index);
        setBlplaatseinde(obj, index);
        setBlregioaanv(obj, index);
        setBlregioeinde(obj, index);
        setDataanv(obj, index);
        setDateinde(obj, index);
        setGemaanv(obj, index);
        setGemeinde(obj, index);
        setLandaanv(obj, index);
        setLandeinde(obj, index);
        setOmslocaanv(obj, index);
        setOmsloceinde(obj, index);
        setRdneinde(obj, index);
        setRelatiestatushis(obj, index);
        setSrt(obj, index);
        setWplaanv(obj, index);
        setWpleinde(obj, index);
        return obj;
    }
    
    public void RelatieDataOnDemand.setBlplaatsaanv(Relatie obj, int index) {
        String blplaatsaanv = "blplaatsaanv_" + index;
        if (blplaatsaanv.length() > 40) {
            blplaatsaanv = blplaatsaanv.substring(0, 40);
        }
        obj.setBlplaatsaanv(blplaatsaanv);
    }
    
    public void RelatieDataOnDemand.setBlplaatseinde(Relatie obj, int index) {
        String blplaatseinde = "blplaatseinde_" + index;
        if (blplaatseinde.length() > 40) {
            blplaatseinde = blplaatseinde.substring(0, 40);
        }
        obj.setBlplaatseinde(blplaatseinde);
    }
    
    public void RelatieDataOnDemand.setBlregioaanv(Relatie obj, int index) {
        String blregioaanv = "blregioaanv_" + index;
        if (blregioaanv.length() > 35) {
            blregioaanv = blregioaanv.substring(0, 35);
        }
        obj.setBlregioaanv(blregioaanv);
    }
    
    public void RelatieDataOnDemand.setBlregioeinde(Relatie obj, int index) {
        String blregioeinde = "blregioeinde_" + index;
        if (blregioeinde.length() > 35) {
            blregioeinde = blregioeinde.substring(0, 35);
        }
        obj.setBlregioeinde(blregioeinde);
    }
    
    public void RelatieDataOnDemand.setDataanv(Relatie obj, int index) {
        BigDecimal dataanv = BigDecimal.valueOf(index);
        obj.setDataanv(dataanv);
    }
    
    public void RelatieDataOnDemand.setDateinde(Relatie obj, int index) {
        BigDecimal dateinde = BigDecimal.valueOf(index);
        obj.setDateinde(dateinde);
    }
    
    public void RelatieDataOnDemand.setGemaanv(Relatie obj, int index) {
        Partij gemaanv = partijDataOnDemand.getRandomPartij();
        obj.setGemaanv(gemaanv);
    }
    
    public void RelatieDataOnDemand.setGemeinde(Relatie obj, int index) {
        Partij gemeinde = partijDataOnDemand.getRandomPartij();
        obj.setGemeinde(gemeinde);
    }
    
    public void RelatieDataOnDemand.setLandaanv(Relatie obj, int index) {
        Land landaanv = landDataOnDemand.getRandomLand();
        obj.setLandaanv(landaanv);
    }
    
    public void RelatieDataOnDemand.setLandeinde(Relatie obj, int index) {
        Land landeinde = landDataOnDemand.getRandomLand();
        obj.setLandeinde(landeinde);
    }
    
    public void RelatieDataOnDemand.setOmslocaanv(Relatie obj, int index) {
        String omslocaanv = "omslocaanv_" + index;
        if (omslocaanv.length() > 40) {
            omslocaanv = omslocaanv.substring(0, 40);
        }
        obj.setOmslocaanv(omslocaanv);
    }
    
    public void RelatieDataOnDemand.setOmsloceinde(Relatie obj, int index) {
        String omsloceinde = "omsloceinde_" + index;
        if (omsloceinde.length() > 40) {
            omsloceinde = omsloceinde.substring(0, 40);
        }
        obj.setOmsloceinde(omsloceinde);
    }
    
    public void RelatieDataOnDemand.setRdneinde(Relatie obj, int index) {
        Rdnbeeindrelatie rdneinde = rdnbeeindrelatieDataOnDemand.getRandomRdnbeeindrelatie();
        obj.setRdneinde(rdneinde);
    }
    
    public void RelatieDataOnDemand.setRelatiestatushis(Relatie obj, int index) {
        String relatiestatushis = String.valueOf(index);
        if (relatiestatushis.length() > 1) {
            relatiestatushis = relatiestatushis.substring(0, 1);
        }
        obj.setRelatiestatushis(relatiestatushis);
    }
    
    public void RelatieDataOnDemand.setSrt(Relatie obj, int index) {
        Srtrelatie srt = srtrelatieDataOnDemand.getRandomSrtrelatie();
        obj.setSrt(srt);
    }
    
    public void RelatieDataOnDemand.setWplaanv(Relatie obj, int index) {
        Plaats wplaanv = plaatsDataOnDemand.getRandomPlaats();
        obj.setWplaanv(wplaanv);
    }
    
    public void RelatieDataOnDemand.setWpleinde(Relatie obj, int index) {
        Plaats wpleinde = plaatsDataOnDemand.getRandomPlaats();
        obj.setWpleinde(wpleinde);
    }
    
    public Relatie RelatieDataOnDemand.getSpecificRelatie(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Relatie obj = data.get(index);
        Long id = obj.getId();
        return Relatie.findRelatie(id);
    }
    
    public Relatie RelatieDataOnDemand.getRandomRelatie() {
        init();
        Relatie obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Relatie.findRelatie(id);
    }
    
    public boolean RelatieDataOnDemand.modifyRelatie(Relatie obj) {
        return false;
    }
    
    public void RelatieDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Relatie.findRelatieEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Relatie' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Relatie>();
        for (int i = 0; i < 10; i++) {
            Relatie obj = getNewTransientRelatie(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
