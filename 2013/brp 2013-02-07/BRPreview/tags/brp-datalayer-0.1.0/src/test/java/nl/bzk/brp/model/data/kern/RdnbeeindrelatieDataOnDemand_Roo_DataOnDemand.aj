// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Rdnbeeindrelatie;
import nl.bzk.brp.model.data.kern.RdnbeeindrelatieDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect RdnbeeindrelatieDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RdnbeeindrelatieDataOnDemand: @Component;
    
    private Random RdnbeeindrelatieDataOnDemand.rnd = new SecureRandom();
    
    private List<Rdnbeeindrelatie> RdnbeeindrelatieDataOnDemand.data;
    
    public Rdnbeeindrelatie RdnbeeindrelatieDataOnDemand.getNewTransientRdnbeeindrelatie(int index) {
        Rdnbeeindrelatie obj = new Rdnbeeindrelatie();
        setCode(obj, index);
        setOms(obj, index);
        return obj;
    }
    
    public void RdnbeeindrelatieDataOnDemand.setCode(Rdnbeeindrelatie obj, int index) {
        String code = String.valueOf(index);
        if (code.length() > 1) {
            code = code.substring(0, 1);
        }
        obj.setCode(code);
    }
    
    public void RdnbeeindrelatieDataOnDemand.setOms(Rdnbeeindrelatie obj, int index) {
        String oms = "oms_" + index;
        if (oms.length() > 250) {
            oms = new Random().nextInt(10) + oms.substring(1, 250);
        }
        obj.setOms(oms);
    }
    
    public Rdnbeeindrelatie RdnbeeindrelatieDataOnDemand.getSpecificRdnbeeindrelatie(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Rdnbeeindrelatie obj = data.get(index);
        Short id = obj.getId();
        return Rdnbeeindrelatie.findRdnbeeindrelatie(id);
    }
    
    public Rdnbeeindrelatie RdnbeeindrelatieDataOnDemand.getRandomRdnbeeindrelatie() {
        init();
        Rdnbeeindrelatie obj = data.get(rnd.nextInt(data.size()));
        Short id = obj.getId();
        return Rdnbeeindrelatie.findRdnbeeindrelatie(id);
    }
    
    public boolean RdnbeeindrelatieDataOnDemand.modifyRdnbeeindrelatie(Rdnbeeindrelatie obj) {
        return false;
    }
    
    public void RdnbeeindrelatieDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Rdnbeeindrelatie.findRdnbeeindrelatieEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Rdnbeeindrelatie' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Rdnbeeindrelatie>();
        for (int i = 0; i < 10; i++) {
            Rdnbeeindrelatie obj = getNewTransientRdnbeeindrelatie(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
