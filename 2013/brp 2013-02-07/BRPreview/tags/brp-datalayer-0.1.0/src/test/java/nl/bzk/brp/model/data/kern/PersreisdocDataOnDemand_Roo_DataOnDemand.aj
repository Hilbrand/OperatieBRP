// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Autvanafgiftereisdoc;
import nl.bzk.brp.model.data.kern.AutvanafgiftereisdocDataOnDemand;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import nl.bzk.brp.model.data.kern.Persreisdoc;
import nl.bzk.brp.model.data.kern.PersreisdocDataOnDemand;
import nl.bzk.brp.model.data.kern.Rdnvervallenreisdoc;
import nl.bzk.brp.model.data.kern.RdnvervallenreisdocDataOnDemand;
import nl.bzk.brp.model.data.kern.Srtnlreisdoc;
import nl.bzk.brp.model.data.kern.SrtnlreisdocDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PersreisdocDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersreisdocDataOnDemand: @Component;
    
    private Random PersreisdocDataOnDemand.rnd = new SecureRandom();
    
    private List<Persreisdoc> PersreisdocDataOnDemand.data;
    
    @Autowired
    private AutvanafgiftereisdocDataOnDemand PersreisdocDataOnDemand.autvanafgiftereisdocDataOnDemand;
    
    @Autowired
    private PersDataOnDemand PersreisdocDataOnDemand.persDataOnDemand;
    
    @Autowired
    private RdnvervallenreisdocDataOnDemand PersreisdocDataOnDemand.rdnvervallenreisdocDataOnDemand;
    
    @Autowired
    private SrtnlreisdocDataOnDemand PersreisdocDataOnDemand.srtnlreisdocDataOnDemand;
    
    public Persreisdoc PersreisdocDataOnDemand.getNewTransientPersreisdoc(int index) {
        Persreisdoc obj = new Persreisdoc();
        setAutvanafgifte(obj, index);
        setDatinhingvermissing(obj, index);
        setDatuitgifte(obj, index);
        setDatvoorzeeindegel(obj, index);
        setLengtehouder(obj, index);
        setNr(obj, index);
        setPers(obj, index);
        setPersreisdocstatushis(obj, index);
        setRdnvervallen(obj, index);
        setSrt(obj, index);
        return obj;
    }
    
    public void PersreisdocDataOnDemand.setAutvanafgifte(Persreisdoc obj, int index) {
        Autvanafgiftereisdoc autvanafgifte = autvanafgiftereisdocDataOnDemand.getRandomAutvanafgiftereisdoc();
        obj.setAutvanafgifte(autvanafgifte);
    }
    
    public void PersreisdocDataOnDemand.setDatinhingvermissing(Persreisdoc obj, int index) {
        BigDecimal datinhingvermissing = BigDecimal.valueOf(index);
        obj.setDatinhingvermissing(datinhingvermissing);
    }
    
    public void PersreisdocDataOnDemand.setDatuitgifte(Persreisdoc obj, int index) {
        BigDecimal datuitgifte = BigDecimal.valueOf(index);
        obj.setDatuitgifte(datuitgifte);
    }
    
    public void PersreisdocDataOnDemand.setDatvoorzeeindegel(Persreisdoc obj, int index) {
        BigDecimal datvoorzeeindegel = BigDecimal.valueOf(index);
        obj.setDatvoorzeeindegel(datvoorzeeindegel);
    }
    
    public void PersreisdocDataOnDemand.setLengtehouder(Persreisdoc obj, int index) {
        BigDecimal lengtehouder = BigDecimal.valueOf(index);
        obj.setLengtehouder(lengtehouder);
    }
    
    public void PersreisdocDataOnDemand.setNr(Persreisdoc obj, int index) {
        String nr = "nr_" + index;
        if (nr.length() > 9) {
            nr = nr.substring(0, 9);
        }
        obj.setNr(nr);
    }
    
    public void PersreisdocDataOnDemand.setPers(Persreisdoc obj, int index) {
        Pers pers = persDataOnDemand.getRandomPers();
        obj.setPers(pers);
    }
    
    public void PersreisdocDataOnDemand.setPersreisdocstatushis(Persreisdoc obj, int index) {
        String persreisdocstatushis = String.valueOf(index);
        if (persreisdocstatushis.length() > 1) {
            persreisdocstatushis = persreisdocstatushis.substring(0, 1);
        }
        obj.setPersreisdocstatushis(persreisdocstatushis);
    }
    
    public void PersreisdocDataOnDemand.setRdnvervallen(Persreisdoc obj, int index) {
        Rdnvervallenreisdoc rdnvervallen = rdnvervallenreisdocDataOnDemand.getRandomRdnvervallenreisdoc();
        obj.setRdnvervallen(rdnvervallen);
    }
    
    public void PersreisdocDataOnDemand.setSrt(Persreisdoc obj, int index) {
        Srtnlreisdoc srt = srtnlreisdocDataOnDemand.getRandomSrtnlreisdoc();
        obj.setSrt(srt);
    }
    
    public Persreisdoc PersreisdocDataOnDemand.getSpecificPersreisdoc(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Persreisdoc obj = data.get(index);
        Long id = obj.getId();
        return Persreisdoc.findPersreisdoc(id);
    }
    
    public Persreisdoc PersreisdocDataOnDemand.getRandomPersreisdoc() {
        init();
        Persreisdoc obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Persreisdoc.findPersreisdoc(id);
    }
    
    public boolean PersreisdocDataOnDemand.modifyPersreisdoc(Persreisdoc obj) {
        return false;
    }
    
    public void PersreisdocDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Persreisdoc.findPersreisdocEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Persreisdoc' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Persreisdoc>();
        for (int i = 0; i < 10; i++) {
            Persreisdoc obj = getNewTransientPersreisdoc(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
