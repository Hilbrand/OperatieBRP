// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Nation;
import nl.bzk.brp.model.data.kern.NationDataOnDemand;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import nl.bzk.brp.model.data.kern.Persnation;
import nl.bzk.brp.model.data.kern.PersnationDataOnDemand;
import nl.bzk.brp.model.data.kern.Rdnverknlnation;
import nl.bzk.brp.model.data.kern.RdnverknlnationDataOnDemand;
import nl.bzk.brp.model.data.kern.Rdnverliesnlnation;
import nl.bzk.brp.model.data.kern.RdnverliesnlnationDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PersnationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersnationDataOnDemand: @Component;
    
    private Random PersnationDataOnDemand.rnd = new SecureRandom();
    
    private List<Persnation> PersnationDataOnDemand.data;
    
    @Autowired
    private NationDataOnDemand PersnationDataOnDemand.nationDataOnDemand;
    
    @Autowired
    private PersDataOnDemand PersnationDataOnDemand.persDataOnDemand;
    
    @Autowired
    private RdnverknlnationDataOnDemand PersnationDataOnDemand.rdnverknlnationDataOnDemand;
    
    @Autowired
    private RdnverliesnlnationDataOnDemand PersnationDataOnDemand.rdnverliesnlnationDataOnDemand;
    
    public Persnation PersnationDataOnDemand.getNewTransientPersnation(int index) {
        Persnation obj = new Persnation();
        setNation(obj, index);
        setPers(obj, index);
        setPersnationstatushis(obj, index);
        setRdnverk(obj, index);
        setRdnverlies(obj, index);
        return obj;
    }
    
    public void PersnationDataOnDemand.setNation(Persnation obj, int index) {
        Nation nation = nationDataOnDemand.getRandomNation();
        obj.setNation(nation);
    }
    
    public void PersnationDataOnDemand.setPers(Persnation obj, int index) {
        Pers pers = persDataOnDemand.getRandomPers();
        obj.setPers(pers);
    }
    
    public void PersnationDataOnDemand.setPersnationstatushis(Persnation obj, int index) {
        String persnationstatushis = String.valueOf(index);
        if (persnationstatushis.length() > 1) {
            persnationstatushis = persnationstatushis.substring(0, 1);
        }
        obj.setPersnationstatushis(persnationstatushis);
    }
    
    public void PersnationDataOnDemand.setRdnverk(Persnation obj, int index) {
        Rdnverknlnation rdnverk = rdnverknlnationDataOnDemand.getRandomRdnverknlnation();
        obj.setRdnverk(rdnverk);
    }
    
    public void PersnationDataOnDemand.setRdnverlies(Persnation obj, int index) {
        Rdnverliesnlnation rdnverlies = rdnverliesnlnationDataOnDemand.getRandomRdnverliesnlnation();
        obj.setRdnverlies(rdnverlies);
    }
    
    public Persnation PersnationDataOnDemand.getSpecificPersnation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Persnation obj = data.get(index);
        Long id = obj.getId();
        return Persnation.findPersnation(id);
    }
    
    public Persnation PersnationDataOnDemand.getRandomPersnation() {
        init();
        Persnation obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Persnation.findPersnation(id);
    }
    
    public boolean PersnationDataOnDemand.modifyPersnation(Persnation obj) {
        return false;
    }
    
    public void PersnationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Persnation.findPersnationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Persnation' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Persnation>();
        for (int i = 0; i < 10; i++) {
            Persnation obj = getNewTransientPersnation(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
