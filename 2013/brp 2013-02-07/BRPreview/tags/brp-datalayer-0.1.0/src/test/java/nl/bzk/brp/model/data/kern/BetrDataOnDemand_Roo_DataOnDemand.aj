// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Betr;
import nl.bzk.brp.model.data.kern.BetrDataOnDemand;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import nl.bzk.brp.model.data.kern.Relatie;
import nl.bzk.brp.model.data.kern.RelatieDataOnDemand;
import nl.bzk.brp.model.data.kern.Srtbetr;
import nl.bzk.brp.model.data.kern.SrtbetrDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BetrDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BetrDataOnDemand: @Component;
    
    private Random BetrDataOnDemand.rnd = new SecureRandom();
    
    private List<Betr> BetrDataOnDemand.data;
    
    @Autowired
    private PersDataOnDemand BetrDataOnDemand.persDataOnDemand;
    
    @Autowired
    private RelatieDataOnDemand BetrDataOnDemand.relatieDataOnDemand;
    
    @Autowired
    private SrtbetrDataOnDemand BetrDataOnDemand.srtbetrDataOnDemand;
    
    public Betr BetrDataOnDemand.getNewTransientBetr(int index) {
        Betr obj = new Betr();
        setBetrokkene(obj, index);
        setIndouder(obj, index);
        setIndouderheeftgezag(obj, index);
        setOuderlijkgezagstatushis(obj, index);
        setOuderstatushis(obj, index);
        setRelatie(obj, index);
        setRol(obj, index);
        return obj;
    }
    
    public void BetrDataOnDemand.setBetrokkene(Betr obj, int index) {
        Pers betrokkene = persDataOnDemand.getRandomPers();
        obj.setBetrokkene(betrokkene);
    }
    
    public void BetrDataOnDemand.setIndouder(Betr obj, int index) {
        Boolean indouder = Boolean.TRUE;
        obj.setIndouder(indouder);
    }
    
    public void BetrDataOnDemand.setIndouderheeftgezag(Betr obj, int index) {
        Boolean indouderheeftgezag = Boolean.TRUE;
        obj.setIndouderheeftgezag(indouderheeftgezag);
    }
    
    public void BetrDataOnDemand.setOuderlijkgezagstatushis(Betr obj, int index) {
        String ouderlijkgezagstatushis = String.valueOf(index);
        if (ouderlijkgezagstatushis.length() > 1) {
            ouderlijkgezagstatushis = ouderlijkgezagstatushis.substring(0, 1);
        }
        obj.setOuderlijkgezagstatushis(ouderlijkgezagstatushis);
    }
    
    public void BetrDataOnDemand.setOuderstatushis(Betr obj, int index) {
        String ouderstatushis = String.valueOf(index);
        if (ouderstatushis.length() > 1) {
            ouderstatushis = ouderstatushis.substring(0, 1);
        }
        obj.setOuderstatushis(ouderstatushis);
    }
    
    public void BetrDataOnDemand.setRelatie(Betr obj, int index) {
        Relatie relatie = relatieDataOnDemand.getRandomRelatie();
        obj.setRelatie(relatie);
    }
    
    public void BetrDataOnDemand.setRol(Betr obj, int index) {
        Srtbetr rol = srtbetrDataOnDemand.getRandomSrtbetr();
        obj.setRol(rol);
    }
    
    public Betr BetrDataOnDemand.getSpecificBetr(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Betr obj = data.get(index);
        Integer id = obj.getId();
        return Betr.findBetr(id);
    }
    
    public Betr BetrDataOnDemand.getRandomBetr() {
        init();
        Betr obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Betr.findBetr(id);
    }
    
    public boolean BetrDataOnDemand.modifyBetr(Betr obj) {
        return false;
    }
    
    public void BetrDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Betr.findBetrEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Betr' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Betr>();
        for (int i = 0; i < 10; i++) {
            Betr obj = getNewTransientBetr(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
