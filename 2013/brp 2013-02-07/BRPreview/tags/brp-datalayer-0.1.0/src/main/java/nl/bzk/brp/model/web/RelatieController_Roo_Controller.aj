// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import nl.bzk.brp.model.data.kern.Betr;
import nl.bzk.brp.model.data.kern.HisRelatie;
import nl.bzk.brp.model.data.kern.Land;
import nl.bzk.brp.model.data.kern.Multirealiteitregel;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.Plaats;
import nl.bzk.brp.model.data.kern.Rdnbeeindrelatie;
import nl.bzk.brp.model.data.kern.Relatie;
import nl.bzk.brp.model.data.kern.Srtrelatie;
import nl.bzk.brp.model.web.RelatieController;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect RelatieController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String RelatieController.create(@Valid Relatie relatie, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, relatie);
            return "relaties/create";
        }
        uiModel.asMap().clear();
        relatie.persist();
        return "redirect:/relaties/" + encodeUrlPathSegment(relatie.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String RelatieController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Relatie());
        return "relaties/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String RelatieController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("relatie", Relatie.findRelatie(id));
        uiModel.addAttribute("itemId", id);
        return "relaties/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String RelatieController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("relaties", Relatie.findRelatieEntries(firstResult, sizeNo));
            float nrOfPages = (float) Relatie.countRelaties() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("relaties", Relatie.findAllRelaties());
        }
        return "relaties/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String RelatieController.update(@Valid Relatie relatie, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, relatie);
            return "relaties/update";
        }
        uiModel.asMap().clear();
        relatie.merge();
        return "redirect:/relaties/" + encodeUrlPathSegment(relatie.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String RelatieController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Relatie.findRelatie(id));
        return "relaties/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String RelatieController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Relatie relatie = Relatie.findRelatie(id);
        relatie.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/relaties";
    }
    
    void RelatieController.populateEditForm(Model uiModel, Relatie relatie) {
        uiModel.addAttribute("relatie", relatie);
        uiModel.addAttribute("betrs", Betr.findAllBetrs());
        uiModel.addAttribute("hisrelaties", HisRelatie.findAllHisRelaties());
        uiModel.addAttribute("lands", Land.findAllLands());
        uiModel.addAttribute("multirealiteitregels", Multirealiteitregel.findAllMultirealiteitregels());
        uiModel.addAttribute("partijs", Partij.findAllPartijs());
        uiModel.addAttribute("plaatses", Plaats.findAllPlaatses());
        uiModel.addAttribute("rdnbeeindrelaties", Rdnbeeindrelatie.findAllRdnbeeindrelaties());
        uiModel.addAttribute("srtrelaties", Srtrelatie.findAllSrtrelaties());
    }
    
    String RelatieController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
