// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import nl.bzk.brp.model.data.kern.Adellijketitel;
import nl.bzk.brp.model.data.kern.Betr;
import nl.bzk.brp.model.data.kern.Geslachtsaand;
import nl.bzk.brp.model.data.kern.HisPersaanschr;
import nl.bzk.brp.model.data.kern.HisPersbijhgem;
import nl.bzk.brp.model.data.kern.HisPersbijhverantwoordelijk;
import nl.bzk.brp.model.data.kern.HisPerseuverkiezingen;
import nl.bzk.brp.model.data.kern.HisPersgeboorte;
import nl.bzk.brp.model.data.kern.HisPersgeslachtsaand;
import nl.bzk.brp.model.data.kern.HisPersids;
import nl.bzk.brp.model.data.kern.HisPersimmigratie;
import nl.bzk.brp.model.data.kern.HisPersinschr;
import nl.bzk.brp.model.data.kern.HisPersopschorting;
import nl.bzk.brp.model.data.kern.HisPersoverlijden;
import nl.bzk.brp.model.data.kern.HisPerspk;
import nl.bzk.brp.model.data.kern.HisPerssamengesteldenaam;
import nl.bzk.brp.model.data.kern.HisPersuitslnlkiesr;
import nl.bzk.brp.model.data.kern.HisPersverblijfsr;
import nl.bzk.brp.model.data.kern.Land;
import nl.bzk.brp.model.data.kern.Multirealiteitregel;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.Persadres;
import nl.bzk.brp.model.data.kern.Persgeslnaamcomp;
import nl.bzk.brp.model.data.kern.Persindicatie;
import nl.bzk.brp.model.data.kern.Persnation;
import nl.bzk.brp.model.data.kern.Persreisdoc;
import nl.bzk.brp.model.data.kern.Persverificatie;
import nl.bzk.brp.model.data.kern.Persvoornaam;
import nl.bzk.brp.model.data.kern.Plaats;
import nl.bzk.brp.model.data.kern.Predikaat;
import nl.bzk.brp.model.data.kern.Rdnopschorting;
import nl.bzk.brp.model.data.kern.Srtpers;
import nl.bzk.brp.model.data.kern.Verantwoordelijke;
import nl.bzk.brp.model.data.kern.Verblijfsr;
import nl.bzk.brp.model.data.kern.Wijzegebruikgeslnaam;
import nl.bzk.brp.model.data.lev.Levpers;
import nl.bzk.brp.model.service.PersonService;
import nl.bzk.brp.model.web.PersController;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PersController_Roo_Controller {
    
    @Autowired
    PersonService PersController.personService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PersController.create(@Valid Pers pers, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, pers);
            return "perses/create";
        }
        uiModel.asMap().clear();
        personService.savePers(pers);
        return "redirect:/perses/" + encodeUrlPathSegment(pers.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PersController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Pers());
        return "perses/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PersController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("pers", personService.findPers(id));
        uiModel.addAttribute("itemId", id);
        return "perses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PersController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("perses", personService.findPersEntries(firstResult, sizeNo));
            float nrOfPages = (float) personService.countAllPerses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("perses", personService.findAllPerses());
        }
        addDateTimeFormatPatterns(uiModel);
        return "perses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PersController.update(@Valid Pers pers, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, pers);
            return "perses/update";
        }
        uiModel.asMap().clear();
        personService.updatePers(pers);
        return "redirect:/perses/" + encodeUrlPathSegment(pers.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PersController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, personService.findPers(id));
        return "perses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PersController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Pers pers = personService.findPers(id);
        personService.deletePers(pers);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/perses";
    }
    
    void PersController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("pers_tijdstiplaatstewijz_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void PersController.populateEditForm(Model uiModel, Pers pers) {
        uiModel.addAttribute("pers", pers);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("adellijketitels", Adellijketitel.findAllAdellijketitels());
        uiModel.addAttribute("betrs", Betr.findAllBetrs());
        uiModel.addAttribute("geslachtsaands", Geslachtsaand.findAllGeslachtsaands());
        uiModel.addAttribute("hispersaanschrs", HisPersaanschr.findAllHisPersaanschrs());
        uiModel.addAttribute("hispersbijhgems", HisPersbijhgem.findAllHisPersbijhgems());
        uiModel.addAttribute("hispersbijhverantwoordelijks", HisPersbijhverantwoordelijk.findAllHisPersbijhverantwoordelijks());
        uiModel.addAttribute("hisperseuverkiezingens", HisPerseuverkiezingen.findAllHisPerseuverkiezingens());
        uiModel.addAttribute("hispersgeboortes", HisPersgeboorte.findAllHisPersgeboortes());
        uiModel.addAttribute("hispersgeslachtsaands", HisPersgeslachtsaand.findAllHisPersgeslachtsaands());
        uiModel.addAttribute("hispersidses", HisPersids.findAllHisPersidses());
        uiModel.addAttribute("hispersimmigraties", HisPersimmigratie.findAllHisPersimmigraties());
        uiModel.addAttribute("hispersinschrs", HisPersinschr.findAllHisPersinschrs());
        uiModel.addAttribute("hispersopschortings", HisPersopschorting.findAllHisPersopschortings());
        uiModel.addAttribute("hispersoverlijdens", HisPersoverlijden.findAllHisPersoverlijdens());
        uiModel.addAttribute("hisperspks", HisPerspk.findAllHisPerspks());
        uiModel.addAttribute("hisperssamengesteldenaams", HisPerssamengesteldenaam.findAllHisPerssamengesteldenaams());
        uiModel.addAttribute("hispersuitslnlkiesrs", HisPersuitslnlkiesr.findAllHisPersuitslnlkiesrs());
        uiModel.addAttribute("hispersverblijfsrs", HisPersverblijfsr.findAllHisPersverblijfsrs());
        uiModel.addAttribute("lands", Land.findAllLands());
        uiModel.addAttribute("multirealiteitregels", Multirealiteitregel.findAllMultirealiteitregels());
        uiModel.addAttribute("partijs", Partij.findAllPartijs());
        uiModel.addAttribute("perses", personService.findAllPerses());
        uiModel.addAttribute("persadreses", Persadres.findAllPersadreses());
        uiModel.addAttribute("persgeslnaamcomps", Persgeslnaamcomp.findAllPersgeslnaamcomps());
        uiModel.addAttribute("persindicaties", Persindicatie.findAllPersindicaties());
        uiModel.addAttribute("persnations", Persnation.findAllPersnations());
        uiModel.addAttribute("persreisdocs", Persreisdoc.findAllPersreisdocs());
        uiModel.addAttribute("persverificaties", Persverificatie.findAllPersverificaties());
        uiModel.addAttribute("persvoornaams", Persvoornaam.findAllPersvoornaams());
        uiModel.addAttribute("plaatses", Plaats.findAllPlaatses());
        uiModel.addAttribute("predikaats", Predikaat.findAllPredikaats());
        uiModel.addAttribute("rdnopschortings", Rdnopschorting.findAllRdnopschortings());
        uiModel.addAttribute("srtperses", Srtpers.findAllSrtperses());
        uiModel.addAttribute("verantwoordelijkes", Verantwoordelijke.findAllVerantwoordelijkes());
        uiModel.addAttribute("verblijfsrs", Verblijfsr.findAllVerblijfsrs());
        uiModel.addAttribute("wijzegebruikgeslnaams", Wijzegebruikgeslnaam.findAllWijzegebruikgeslnaams());
        uiModel.addAttribute("levperses", Levpers.findAllLevperses());
    }
    
    String PersController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
