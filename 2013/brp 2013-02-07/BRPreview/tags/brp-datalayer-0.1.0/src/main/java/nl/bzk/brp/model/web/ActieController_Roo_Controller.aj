// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import nl.bzk.brp.model.data.autaut.HisAuthenticatiemiddel;
import nl.bzk.brp.model.data.autaut.HisAutorisatiebesluit;
import nl.bzk.brp.model.data.autaut.HisAutorisatiebesluitbijhau;
import nl.bzk.brp.model.data.autaut.HisBijhautorisatie;
import nl.bzk.brp.model.data.autaut.HisBijhsituatie;
import nl.bzk.brp.model.data.autaut.HisDoelbinding;
import nl.bzk.brp.model.data.autaut.HisUitgeslotene;
import nl.bzk.brp.model.data.brm.HisRegelimplementatiesituat;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.Bron;
import nl.bzk.brp.model.data.kern.HisBetrouder;
import nl.bzk.brp.model.data.kern.HisBetrouderlijkgezag;
import nl.bzk.brp.model.data.kern.HisDoc;
import nl.bzk.brp.model.data.kern.HisGem;
import nl.bzk.brp.model.data.kern.HisMultirealiteitregel;
import nl.bzk.brp.model.data.kern.HisOnderzoek;
import nl.bzk.brp.model.data.kern.HisPartij;
import nl.bzk.brp.model.data.kern.HisPersaanschr;
import nl.bzk.brp.model.data.kern.HisPersadres;
import nl.bzk.brp.model.data.kern.HisPersbijhgem;
import nl.bzk.brp.model.data.kern.HisPersbijhverantwoordelijk;
import nl.bzk.brp.model.data.kern.HisPerseuverkiezingen;
import nl.bzk.brp.model.data.kern.HisPersgeboorte;
import nl.bzk.brp.model.data.kern.HisPersgeslachtsaand;
import nl.bzk.brp.model.data.kern.HisPersgeslnaamcomp;
import nl.bzk.brp.model.data.kern.HisPersids;
import nl.bzk.brp.model.data.kern.HisPersimmigratie;
import nl.bzk.brp.model.data.kern.HisPersindicatie;
import nl.bzk.brp.model.data.kern.HisPersinschr;
import nl.bzk.brp.model.data.kern.HisPersnation;
import nl.bzk.brp.model.data.kern.HisPersopschorting;
import nl.bzk.brp.model.data.kern.HisPersoverlijden;
import nl.bzk.brp.model.data.kern.HisPerspk;
import nl.bzk.brp.model.data.kern.HisPersreisdoc;
import nl.bzk.brp.model.data.kern.HisPerssamengesteldenaam;
import nl.bzk.brp.model.data.kern.HisPersuitslnlkiesr;
import nl.bzk.brp.model.data.kern.HisPersverblijfsr;
import nl.bzk.brp.model.data.kern.HisPersverificatie;
import nl.bzk.brp.model.data.kern.HisPersvoornaam;
import nl.bzk.brp.model.data.kern.HisRelatie;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.Srtactie;
import nl.bzk.brp.model.data.kern.Verdrag;
import nl.bzk.brp.model.data.lev.HisAbonnement;
import nl.bzk.brp.model.data.lev.HisAbonnementsrtber;
import nl.bzk.brp.model.web.ActieController;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ActieController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ActieController.create(@Valid Actie actie, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, actie);
            return "acties/create";
        }
        uiModel.asMap().clear();
        actie.persist();
        return "redirect:/acties/" + encodeUrlPathSegment(actie.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ActieController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Actie());
        return "acties/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ActieController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("actie", Actie.findActie(id));
        uiModel.addAttribute("itemId", id);
        return "acties/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ActieController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("acties", Actie.findActieEntries(firstResult, sizeNo));
            float nrOfPages = (float) Actie.countActies() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("acties", Actie.findAllActies());
        }
        addDateTimeFormatPatterns(uiModel);
        return "acties/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ActieController.update(@Valid Actie actie, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, actie);
            return "acties/update";
        }
        uiModel.asMap().clear();
        actie.merge();
        return "redirect:/acties/" + encodeUrlPathSegment(actie.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ActieController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Actie.findActie(id));
        return "acties/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ActieController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Actie actie = Actie.findActie(id);
        actie.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/acties";
    }
    
    void ActieController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("actie_tsontlening_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("actie_tsreg_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void ActieController.populateEditForm(Model uiModel, Actie actie) {
        uiModel.addAttribute("actie", actie);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("hisauthenticatiemiddels", HisAuthenticatiemiddel.findAllHisAuthenticatiemiddels());
        uiModel.addAttribute("hisautorisatiebesluits", HisAutorisatiebesluit.findAllHisAutorisatiebesluits());
        uiModel.addAttribute("hisautorisatiebesluitbijhaus", HisAutorisatiebesluitbijhau.findAllHisAutorisatiebesluitbijhaus());
        uiModel.addAttribute("hisbijhautorisaties", HisBijhautorisatie.findAllHisBijhautorisaties());
        uiModel.addAttribute("hisbijhsituaties", HisBijhsituatie.findAllHisBijhsituaties());
        uiModel.addAttribute("hisdoelbindings", HisDoelbinding.findAllHisDoelbindings());
        uiModel.addAttribute("hisuitgeslotenes", HisUitgeslotene.findAllHisUitgeslotenes());
        uiModel.addAttribute("hisregelimplementatiesituats", HisRegelimplementatiesituat.findAllHisRegelimplementatiesituats());
        uiModel.addAttribute("brons", Bron.findAllBrons());
        uiModel.addAttribute("hisbetrouders", HisBetrouder.findAllHisBetrouders());
        uiModel.addAttribute("hisbetrouderlijkgezags", HisBetrouderlijkgezag.findAllHisBetrouderlijkgezags());
        uiModel.addAttribute("hisdocs", HisDoc.findAllHisDocs());
        uiModel.addAttribute("hisgems", HisGem.findAllHisGems());
        uiModel.addAttribute("hismultirealiteitregels", HisMultirealiteitregel.findAllHisMultirealiteitregels());
        uiModel.addAttribute("hisonderzoeks", HisOnderzoek.findAllHisOnderzoeks());
        uiModel.addAttribute("hispartijs", HisPartij.findAllHisPartijs());
        uiModel.addAttribute("hispersaanschrs", HisPersaanschr.findAllHisPersaanschrs());
        uiModel.addAttribute("hispersadreses", HisPersadres.findAllHisPersadreses());
        uiModel.addAttribute("hispersbijhgems", HisPersbijhgem.findAllHisPersbijhgems());
        uiModel.addAttribute("hispersbijhverantwoordelijks", HisPersbijhverantwoordelijk.findAllHisPersbijhverantwoordelijks());
        uiModel.addAttribute("hisperseuverkiezingens", HisPerseuverkiezingen.findAllHisPerseuverkiezingens());
        uiModel.addAttribute("hispersgeboortes", HisPersgeboorte.findAllHisPersgeboortes());
        uiModel.addAttribute("hispersgeslachtsaands", HisPersgeslachtsaand.findAllHisPersgeslachtsaands());
        uiModel.addAttribute("hispersgeslnaamcomps", HisPersgeslnaamcomp.findAllHisPersgeslnaamcomps());
        uiModel.addAttribute("hispersidses", HisPersids.findAllHisPersidses());
        uiModel.addAttribute("hispersimmigraties", HisPersimmigratie.findAllHisPersimmigraties());
        uiModel.addAttribute("hispersindicaties", HisPersindicatie.findAllHisPersindicaties());
        uiModel.addAttribute("hispersinschrs", HisPersinschr.findAllHisPersinschrs());
        uiModel.addAttribute("hispersnations", HisPersnation.findAllHisPersnations());
        uiModel.addAttribute("hispersopschortings", HisPersopschorting.findAllHisPersopschortings());
        uiModel.addAttribute("hispersoverlijdens", HisPersoverlijden.findAllHisPersoverlijdens());
        uiModel.addAttribute("hisperspks", HisPerspk.findAllHisPerspks());
        uiModel.addAttribute("hispersreisdocs", HisPersreisdoc.findAllHisPersreisdocs());
        uiModel.addAttribute("hisperssamengesteldenaams", HisPerssamengesteldenaam.findAllHisPerssamengesteldenaams());
        uiModel.addAttribute("hispersuitslnlkiesrs", HisPersuitslnlkiesr.findAllHisPersuitslnlkiesrs());
        uiModel.addAttribute("hispersverblijfsrs", HisPersverblijfsr.findAllHisPersverblijfsrs());
        uiModel.addAttribute("hispersverificaties", HisPersverificatie.findAllHisPersverificaties());
        uiModel.addAttribute("hispersvoornaams", HisPersvoornaam.findAllHisPersvoornaams());
        uiModel.addAttribute("hisrelaties", HisRelatie.findAllHisRelaties());
        uiModel.addAttribute("partijs", Partij.findAllPartijs());
        uiModel.addAttribute("srtacties", Srtactie.findAllSrtacties());
        uiModel.addAttribute("verdrags", Verdrag.findAllVerdrags());
        uiModel.addAttribute("hisabonnements", HisAbonnement.findAllHisAbonnements());
        uiModel.addAttribute("hisabonnementsrtbers", HisAbonnementsrtber.findAllHisAbonnementsrtbers());
    }
    
    String ActieController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
