// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import nl.bzk.brp.model.data.kern.Srtactie;
import nl.bzk.brp.model.data.kern.SrtactieDataOnDemand;
import nl.bzk.brp.model.data.kern.Verdrag;
import nl.bzk.brp.model.data.kern.VerdragDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ActieDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ActieDataOnDemand: @Component;
    
    private Random ActieDataOnDemand.rnd = new SecureRandom();
    
    private List<Actie> ActieDataOnDemand.data;
    
    @Autowired
    private PartijDataOnDemand ActieDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private SrtactieDataOnDemand ActieDataOnDemand.srtactieDataOnDemand;
    
    @Autowired
    private VerdragDataOnDemand ActieDataOnDemand.verdragDataOnDemand;
    
    public Actie ActieDataOnDemand.getNewTransientActie(int index) {
        Actie obj = new Actie();
        setPartij(obj, index);
        setSrt(obj, index);
        setTsontlening(obj, index);
        setTsreg(obj, index);
        setVerdrag(obj, index);
        return obj;
    }
    
    public void ActieDataOnDemand.setPartij(Actie obj, int index) {
        Partij partij = partijDataOnDemand.getRandomPartij();
        obj.setPartij(partij);
    }
    
    public void ActieDataOnDemand.setSrt(Actie obj, int index) {
        Srtactie srt = srtactieDataOnDemand.getRandomSrtactie();
        obj.setSrt(srt);
    }
    
    public void ActieDataOnDemand.setTsontlening(Actie obj, int index) {
        Date tsontlening = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsontlening(tsontlening);
    }
    
    public void ActieDataOnDemand.setTsreg(Actie obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void ActieDataOnDemand.setVerdrag(Actie obj, int index) {
        Verdrag verdrag = verdragDataOnDemand.getRandomVerdrag();
        obj.setVerdrag(verdrag);
    }
    
    public Actie ActieDataOnDemand.getSpecificActie(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Actie obj = data.get(index);
        Long id = obj.getId();
        return Actie.findActie(id);
    }
    
    public Actie ActieDataOnDemand.getRandomActie() {
        init();
        Actie obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Actie.findActie(id);
    }
    
    public boolean ActieDataOnDemand.modifyActie(Actie obj) {
        return false;
    }
    
    public void ActieDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Actie.findActieEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Actie' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Actie>();
        for (int i = 0; i < 10; i++) {
            Actie obj = getNewTransientActie(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
