// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import nl.bzk.brp.model.data.kern.HisPersgeboorte;
import nl.bzk.brp.model.data.kern.HisPersgeboorteDataOnDemand;
import nl.bzk.brp.model.data.kern.Land;
import nl.bzk.brp.model.data.kern.LandDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import nl.bzk.brp.model.data.kern.Plaats;
import nl.bzk.brp.model.data.kern.PlaatsDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisPersgeboorteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisPersgeboorteDataOnDemand: @Component;
    
    private Random HisPersgeboorteDataOnDemand.rnd = new SecureRandom();
    
    private List<HisPersgeboorte> HisPersgeboorteDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisPersgeboorteDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private PartijDataOnDemand HisPersgeboorteDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private LandDataOnDemand HisPersgeboorteDataOnDemand.landDataOnDemand;
    
    @Autowired
    private PersDataOnDemand HisPersgeboorteDataOnDemand.persDataOnDemand;
    
    @Autowired
    private PlaatsDataOnDemand HisPersgeboorteDataOnDemand.plaatsDataOnDemand;
    
    public HisPersgeboorte HisPersgeboorteDataOnDemand.getNewTransientHisPersgeboorte(int index) {
        HisPersgeboorte obj = new HisPersgeboorte();
        setActieinh(obj, index);
        setActieverval(obj, index);
        setBlgeboorteplaats(obj, index);
        setBlregiogeboorte(obj, index);
        setDatgeboorte(obj, index);
        setGemgeboorte(obj, index);
        setLandgeboorte(obj, index);
        setOmsgeboorteloc(obj, index);
        setPers(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        setWplgeboorte(obj, index);
        return obj;
    }
    
    public void HisPersgeboorteDataOnDemand.setActieinh(HisPersgeboorte obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisPersgeboorteDataOnDemand.setActieverval(HisPersgeboorte obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisPersgeboorteDataOnDemand.setBlgeboorteplaats(HisPersgeboorte obj, int index) {
        String blgeboorteplaats = "blgeboorteplaats_" + index;
        if (blgeboorteplaats.length() > 40) {
            blgeboorteplaats = blgeboorteplaats.substring(0, 40);
        }
        obj.setBlgeboorteplaats(blgeboorteplaats);
    }
    
    public void HisPersgeboorteDataOnDemand.setBlregiogeboorte(HisPersgeboorte obj, int index) {
        String blregiogeboorte = "blregiogeboorte_" + index;
        if (blregiogeboorte.length() > 35) {
            blregiogeboorte = blregiogeboorte.substring(0, 35);
        }
        obj.setBlregiogeboorte(blregiogeboorte);
    }
    
    public void HisPersgeboorteDataOnDemand.setDatgeboorte(HisPersgeboorte obj, int index) {
        BigDecimal datgeboorte = BigDecimal.valueOf(index);
        obj.setDatgeboorte(datgeboorte);
    }
    
    public void HisPersgeboorteDataOnDemand.setGemgeboorte(HisPersgeboorte obj, int index) {
        Partij gemgeboorte = partijDataOnDemand.getRandomPartij();
        obj.setGemgeboorte(gemgeboorte);
    }
    
    public void HisPersgeboorteDataOnDemand.setLandgeboorte(HisPersgeboorte obj, int index) {
        Land landgeboorte = landDataOnDemand.getRandomLand();
        obj.setLandgeboorte(landgeboorte);
    }
    
    public void HisPersgeboorteDataOnDemand.setOmsgeboorteloc(HisPersgeboorte obj, int index) {
        String omsgeboorteloc = "omsgeboorteloc_" + index;
        if (omsgeboorteloc.length() > 40) {
            omsgeboorteloc = omsgeboorteloc.substring(0, 40);
        }
        obj.setOmsgeboorteloc(omsgeboorteloc);
    }
    
    public void HisPersgeboorteDataOnDemand.setPers(HisPersgeboorte obj, int index) {
        Pers pers = persDataOnDemand.getRandomPers();
        obj.setPers(pers);
    }
    
    public void HisPersgeboorteDataOnDemand.setTsreg(HisPersgeboorte obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisPersgeboorteDataOnDemand.setTsverval(HisPersgeboorte obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public void HisPersgeboorteDataOnDemand.setWplgeboorte(HisPersgeboorte obj, int index) {
        Plaats wplgeboorte = plaatsDataOnDemand.getRandomPlaats();
        obj.setWplgeboorte(wplgeboorte);
    }
    
    public HisPersgeboorte HisPersgeboorteDataOnDemand.getSpecificHisPersgeboorte(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisPersgeboorte obj = data.get(index);
        Long id = obj.getId();
        return HisPersgeboorte.findHisPersgeboorte(id);
    }
    
    public HisPersgeboorte HisPersgeboorteDataOnDemand.getRandomHisPersgeboorte() {
        init();
        HisPersgeboorte obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisPersgeboorte.findHisPersgeboorte(id);
    }
    
    public boolean HisPersgeboorteDataOnDemand.modifyHisPersgeboorte(HisPersgeboorte obj) {
        return false;
    }
    
    public void HisPersgeboorteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisPersgeboorte.findHisPersgeboorteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisPersgeboorte' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisPersgeboorte>();
        for (int i = 0; i < 10; i++) {
            HisPersgeboorte obj = getNewTransientHisPersgeboorte(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
