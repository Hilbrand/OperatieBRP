// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Betr;
import nl.bzk.brp.model.data.kern.BetrDataOnDemand;
import nl.bzk.brp.model.data.kern.Multirealiteitregel;
import nl.bzk.brp.model.data.kern.MultirealiteitregelDataOnDemand;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import nl.bzk.brp.model.data.kern.Relatie;
import nl.bzk.brp.model.data.kern.RelatieDataOnDemand;
import nl.bzk.brp.model.data.kern.Srtmultirealiteitregel;
import nl.bzk.brp.model.data.kern.SrtmultirealiteitregelDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MultirealiteitregelDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MultirealiteitregelDataOnDemand: @Component;
    
    private Random MultirealiteitregelDataOnDemand.rnd = new SecureRandom();
    
    private List<Multirealiteitregel> MultirealiteitregelDataOnDemand.data;
    
    @Autowired
    private BetrDataOnDemand MultirealiteitregelDataOnDemand.betrDataOnDemand;
    
    @Autowired
    private PersDataOnDemand MultirealiteitregelDataOnDemand.persDataOnDemand;
    
    @Autowired
    private RelatieDataOnDemand MultirealiteitregelDataOnDemand.relatieDataOnDemand;
    
    @Autowired
    private SrtmultirealiteitregelDataOnDemand MultirealiteitregelDataOnDemand.srtmultirealiteitregelDataOnDemand;
    
    public Multirealiteitregel MultirealiteitregelDataOnDemand.getNewTransientMultirealiteitregel(int index) {
        Multirealiteitregel obj = new Multirealiteitregel();
        setBetr(obj, index);
        setGeldigvoor(obj, index);
        setMultirealiteitpers(obj, index);
        setMultirealiteitregelstatushis(obj, index);
        setPers(obj, index);
        setRelatie(obj, index);
        setSrt(obj, index);
        return obj;
    }
    
    public void MultirealiteitregelDataOnDemand.setBetr(Multirealiteitregel obj, int index) {
        Betr betr = betrDataOnDemand.getRandomBetr();
        obj.setBetr(betr);
    }
    
    public void MultirealiteitregelDataOnDemand.setGeldigvoor(Multirealiteitregel obj, int index) {
        Pers geldigvoor = persDataOnDemand.getRandomPers();
        obj.setGeldigvoor(geldigvoor);
    }
    
    public void MultirealiteitregelDataOnDemand.setMultirealiteitpers(Multirealiteitregel obj, int index) {
        Pers multirealiteitpers = persDataOnDemand.getRandomPers();
        obj.setMultirealiteitpers(multirealiteitpers);
    }
    
    public void MultirealiteitregelDataOnDemand.setMultirealiteitregelstatushis(Multirealiteitregel obj, int index) {
        String multirealiteitregelstatushis = String.valueOf(index);
        if (multirealiteitregelstatushis.length() > 1) {
            multirealiteitregelstatushis = multirealiteitregelstatushis.substring(0, 1);
        }
        obj.setMultirealiteitregelstatushis(multirealiteitregelstatushis);
    }
    
    public void MultirealiteitregelDataOnDemand.setPers(Multirealiteitregel obj, int index) {
        Pers pers = persDataOnDemand.getRandomPers();
        obj.setPers(pers);
    }
    
    public void MultirealiteitregelDataOnDemand.setRelatie(Multirealiteitregel obj, int index) {
        Relatie relatie = relatieDataOnDemand.getRandomRelatie();
        obj.setRelatie(relatie);
    }
    
    public void MultirealiteitregelDataOnDemand.setSrt(Multirealiteitregel obj, int index) {
        Srtmultirealiteitregel srt = srtmultirealiteitregelDataOnDemand.getRandomSrtmultirealiteitregel();
        obj.setSrt(srt);
    }
    
    public Multirealiteitregel MultirealiteitregelDataOnDemand.getSpecificMultirealiteitregel(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Multirealiteitregel obj = data.get(index);
        Long id = obj.getId();
        return Multirealiteitregel.findMultirealiteitregel(id);
    }
    
    public Multirealiteitregel MultirealiteitregelDataOnDemand.getRandomMultirealiteitregel() {
        init();
        Multirealiteitregel obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Multirealiteitregel.findMultirealiteitregel(id);
    }
    
    public boolean MultirealiteitregelDataOnDemand.modifyMultirealiteitregel(Multirealiteitregel obj) {
        return false;
    }
    
    public void MultirealiteitregelDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Multirealiteitregel.findMultirealiteitregelEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Multirealiteitregel' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Multirealiteitregel>();
        for (int i = 0; i < 10; i++) {
            Multirealiteitregel obj = getNewTransientMultirealiteitregel(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
