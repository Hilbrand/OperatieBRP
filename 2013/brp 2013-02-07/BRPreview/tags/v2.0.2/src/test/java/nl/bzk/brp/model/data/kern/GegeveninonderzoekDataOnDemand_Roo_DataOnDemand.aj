// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Dbobject;
import nl.bzk.brp.model.data.kern.DbobjectDataOnDemand;
import nl.bzk.brp.model.data.kern.Gegeveninonderzoek;
import nl.bzk.brp.model.data.kern.GegeveninonderzoekDataOnDemand;
import nl.bzk.brp.model.data.kern.Onderzoek;
import nl.bzk.brp.model.data.kern.OnderzoekDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect GegeveninonderzoekDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GegeveninonderzoekDataOnDemand: @Component;
    
    private Random GegeveninonderzoekDataOnDemand.rnd = new SecureRandom();
    
    private List<Gegeveninonderzoek> GegeveninonderzoekDataOnDemand.data;
    
    @Autowired
    private OnderzoekDataOnDemand GegeveninonderzoekDataOnDemand.onderzoekDataOnDemand;
    
    @Autowired
    private DbobjectDataOnDemand GegeveninonderzoekDataOnDemand.dbobjectDataOnDemand;
    
    public Gegeveninonderzoek GegeveninonderzoekDataOnDemand.getNewTransientGegeveninonderzoek(int index) {
        Gegeveninonderzoek obj = new Gegeveninonderzoek();
        setIdent(obj, index);
        setOnderzoek(obj, index);
        setSrtgegeven(obj, index);
        return obj;
    }
    
    public void GegeveninonderzoekDataOnDemand.setIdent(Gegeveninonderzoek obj, int index) {
        Long ident = new Integer(index).longValue();
        obj.setIdent(ident);
    }
    
    public void GegeveninonderzoekDataOnDemand.setOnderzoek(Gegeveninonderzoek obj, int index) {
        Onderzoek onderzoek = onderzoekDataOnDemand.getRandomOnderzoek();
        obj.setOnderzoek(onderzoek);
    }
    
    public void GegeveninonderzoekDataOnDemand.setSrtgegeven(Gegeveninonderzoek obj, int index) {
        Dbobject srtgegeven = dbobjectDataOnDemand.getRandomDbobject();
        obj.setSrtgegeven(srtgegeven);
    }
    
    public Gegeveninonderzoek GegeveninonderzoekDataOnDemand.getSpecificGegeveninonderzoek(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Gegeveninonderzoek obj = data.get(index);
        Long id = obj.getId();
        return Gegeveninonderzoek.findGegeveninonderzoek(id);
    }
    
    public Gegeveninonderzoek GegeveninonderzoekDataOnDemand.getRandomGegeveninonderzoek() {
        init();
        Gegeveninonderzoek obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Gegeveninonderzoek.findGegeveninonderzoek(id);
    }
    
    public boolean GegeveninonderzoekDataOnDemand.modifyGegeveninonderzoek(Gegeveninonderzoek obj) {
        return false;
    }
    
    public void GegeveninonderzoekDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Gegeveninonderzoek.findGegeveninonderzoekEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Gegeveninonderzoek' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Gegeveninonderzoek>();
        for (int i = 0; i < 10; i++) {
            Gegeveninonderzoek obj = getNewTransientGegeveninonderzoek(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
