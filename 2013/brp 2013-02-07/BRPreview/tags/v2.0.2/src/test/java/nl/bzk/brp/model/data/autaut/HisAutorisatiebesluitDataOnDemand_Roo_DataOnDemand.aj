// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Autorisatiebesluit;
import nl.bzk.brp.model.data.autaut.AutorisatiebesluitDataOnDemand;
import nl.bzk.brp.model.data.autaut.HisAutorisatiebesluit;
import nl.bzk.brp.model.data.autaut.HisAutorisatiebesluitDataOnDemand;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisAutorisatiebesluitDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisAutorisatiebesluitDataOnDemand: @Component;
    
    private Random HisAutorisatiebesluitDataOnDemand.rnd = new SecureRandom();
    
    private List<HisAutorisatiebesluit> HisAutorisatiebesluitDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisAutorisatiebesluitDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private AutorisatiebesluitDataOnDemand HisAutorisatiebesluitDataOnDemand.autorisatiebesluitDataOnDemand;
    
    public HisAutorisatiebesluit HisAutorisatiebesluitDataOnDemand.getNewTransientHisAutorisatiebesluit(int index) {
        HisAutorisatiebesluit obj = new HisAutorisatiebesluit();
        setActieinh(obj, index);
        setActieverval(obj, index);
        setAutorisatiebesluit(obj, index);
        setDatbesluit(obj, index);
        setDateinde(obj, index);
        setDatingang(obj, index);
        setIndingetrokken(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        return obj;
    }
    
    public void HisAutorisatiebesluitDataOnDemand.setActieinh(HisAutorisatiebesluit obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisAutorisatiebesluitDataOnDemand.setActieverval(HisAutorisatiebesluit obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisAutorisatiebesluitDataOnDemand.setAutorisatiebesluit(HisAutorisatiebesluit obj, int index) {
        Autorisatiebesluit autorisatiebesluit = autorisatiebesluitDataOnDemand.getRandomAutorisatiebesluit();
        obj.setAutorisatiebesluit(autorisatiebesluit);
    }
    
    public void HisAutorisatiebesluitDataOnDemand.setDatbesluit(HisAutorisatiebesluit obj, int index) {
        BigDecimal datbesluit = BigDecimal.valueOf(index);
        obj.setDatbesluit(datbesluit);
    }
    
    public void HisAutorisatiebesluitDataOnDemand.setDateinde(HisAutorisatiebesluit obj, int index) {
        BigDecimal dateinde = BigDecimal.valueOf(index);
        obj.setDateinde(dateinde);
    }
    
    public void HisAutorisatiebesluitDataOnDemand.setDatingang(HisAutorisatiebesluit obj, int index) {
        BigDecimal datingang = BigDecimal.valueOf(index);
        obj.setDatingang(datingang);
    }
    
    public void HisAutorisatiebesluitDataOnDemand.setIndingetrokken(HisAutorisatiebesluit obj, int index) {
        Boolean indingetrokken = true;
        obj.setIndingetrokken(indingetrokken);
    }
    
    public void HisAutorisatiebesluitDataOnDemand.setTsreg(HisAutorisatiebesluit obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisAutorisatiebesluitDataOnDemand.setTsverval(HisAutorisatiebesluit obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public HisAutorisatiebesluit HisAutorisatiebesluitDataOnDemand.getSpecificHisAutorisatiebesluit(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisAutorisatiebesluit obj = data.get(index);
        Long id = obj.getId();
        return HisAutorisatiebesluit.findHisAutorisatiebesluit(id);
    }
    
    public HisAutorisatiebesluit HisAutorisatiebesluitDataOnDemand.getRandomHisAutorisatiebesluit() {
        init();
        HisAutorisatiebesluit obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisAutorisatiebesluit.findHisAutorisatiebesluit(id);
    }
    
    public boolean HisAutorisatiebesluitDataOnDemand.modifyHisAutorisatiebesluit(HisAutorisatiebesluit obj) {
        return false;
    }
    
    public void HisAutorisatiebesluitDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisAutorisatiebesluit.findHisAutorisatiebesluitEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisAutorisatiebesluit' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisAutorisatiebesluit>();
        for (int i = 0; i < 10; i++) {
            HisAutorisatiebesluit obj = getNewTransientHisAutorisatiebesluit(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
