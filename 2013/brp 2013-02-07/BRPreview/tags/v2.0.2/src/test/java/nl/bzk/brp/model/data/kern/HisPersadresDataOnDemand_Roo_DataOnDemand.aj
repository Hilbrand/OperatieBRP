// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Aangadresh;
import nl.bzk.brp.model.data.kern.AangadreshDataOnDemand;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import nl.bzk.brp.model.data.kern.Functieadres;
import nl.bzk.brp.model.data.kern.FunctieadresDataOnDemand;
import nl.bzk.brp.model.data.kern.HisPersadres;
import nl.bzk.brp.model.data.kern.HisPersadresDataOnDemand;
import nl.bzk.brp.model.data.kern.Land;
import nl.bzk.brp.model.data.kern.LandDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import nl.bzk.brp.model.data.kern.Persadres;
import nl.bzk.brp.model.data.kern.PersadresDataOnDemand;
import nl.bzk.brp.model.data.kern.Plaats;
import nl.bzk.brp.model.data.kern.PlaatsDataOnDemand;
import nl.bzk.brp.model.data.kern.Rdnwijzadres;
import nl.bzk.brp.model.data.kern.RdnwijzadresDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisPersadresDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisPersadresDataOnDemand: @Component;
    
    private Random HisPersadresDataOnDemand.rnd = new SecureRandom();
    
    private List<HisPersadres> HisPersadresDataOnDemand.data;
    
    @Autowired
    private AangadreshDataOnDemand HisPersadresDataOnDemand.aangadreshDataOnDemand;
    
    @Autowired
    private ActieDataOnDemand HisPersadresDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private PartijDataOnDemand HisPersadresDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private LandDataOnDemand HisPersadresDataOnDemand.landDataOnDemand;
    
    @Autowired
    private PersadresDataOnDemand HisPersadresDataOnDemand.persadresDataOnDemand;
    
    @Autowired
    private RdnwijzadresDataOnDemand HisPersadresDataOnDemand.rdnwijzadresDataOnDemand;
    
    @Autowired
    private FunctieadresDataOnDemand HisPersadresDataOnDemand.functieadresDataOnDemand;
    
    @Autowired
    private PlaatsDataOnDemand HisPersadresDataOnDemand.plaatsDataOnDemand;
    
    public HisPersadres HisPersadresDataOnDemand.getNewTransientHisPersadres(int index) {
        HisPersadres obj = new HisPersadres();
        setAangadresh(obj, index);
        setActieaanpgel(obj, index);
        setActieinh(obj, index);
        setActieverval(obj, index);
        setAdresseerbaarobject(obj, index);
        setAfgekortenor(obj, index);
        setBladresregel1(obj, index);
        setBladresregel2(obj, index);
        setBladresregel3(obj, index);
        setBladresregel4(obj, index);
        setBladresregel5(obj, index);
        setBladresregel6(obj, index);
        setDataanvadresh(obj, index);
        setDataanvgel(obj, index);
        setDateindegel(obj, index);
        setDatvertrekuitnederland(obj, index);
        setGem(obj, index);
        setGemdeel(obj, index);
        setHuisletter(obj, index);
        setHuisnr(obj, index);
        setHuisnrtoevoeging(obj, index);
        setIdentcodenraand(obj, index);
        setLand(obj, index);
        setLocoms(obj, index);
        setLoctovadres(obj, index);
        setNor(obj, index);
        setPersadres(obj, index);
        setPostcode(obj, index);
        setRdnwijz(obj, index);
        setSrt(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        setWpl(obj, index);
        return obj;
    }
    
    public void HisPersadresDataOnDemand.setAangadresh(HisPersadres obj, int index) {
        Aangadresh aangadresh = aangadreshDataOnDemand.getRandomAangadresh();
        obj.setAangadresh(aangadresh);
    }
    
    public void HisPersadresDataOnDemand.setActieaanpgel(HisPersadres obj, int index) {
        Actie actieaanpgel = actieDataOnDemand.getRandomActie();
        obj.setActieaanpgel(actieaanpgel);
    }
    
    public void HisPersadresDataOnDemand.setActieinh(HisPersadres obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisPersadresDataOnDemand.setActieverval(HisPersadres obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisPersadresDataOnDemand.setAdresseerbaarobject(HisPersadres obj, int index) {
        String adresseerbaarobject = "adresseerbaaro_" + index;
        if (adresseerbaarobject.length() > 16) {
            adresseerbaarobject = adresseerbaarobject.substring(0, 16);
        }
        obj.setAdresseerbaarobject(adresseerbaarobject);
    }
    
    public void HisPersadresDataOnDemand.setAfgekortenor(HisPersadres obj, int index) {
        String afgekortenor = "afgekortenor_" + index;
        if (afgekortenor.length() > 24) {
            afgekortenor = afgekortenor.substring(0, 24);
        }
        obj.setAfgekortenor(afgekortenor);
    }
    
    public void HisPersadresDataOnDemand.setBladresregel1(HisPersadres obj, int index) {
        String bladresregel1 = "bladresregel1_" + index;
        if (bladresregel1.length() > 40) {
            bladresregel1 = bladresregel1.substring(0, 40);
        }
        obj.setBladresregel1(bladresregel1);
    }
    
    public void HisPersadresDataOnDemand.setBladresregel2(HisPersadres obj, int index) {
        String bladresregel2 = "bladresregel2_" + index;
        if (bladresregel2.length() > 40) {
            bladresregel2 = bladresregel2.substring(0, 40);
        }
        obj.setBladresregel2(bladresregel2);
    }
    
    public void HisPersadresDataOnDemand.setBladresregel3(HisPersadres obj, int index) {
        String bladresregel3 = "bladresregel3_" + index;
        if (bladresregel3.length() > 40) {
            bladresregel3 = bladresregel3.substring(0, 40);
        }
        obj.setBladresregel3(bladresregel3);
    }
    
    public void HisPersadresDataOnDemand.setBladresregel4(HisPersadres obj, int index) {
        String bladresregel4 = "bladresregel4_" + index;
        if (bladresregel4.length() > 40) {
            bladresregel4 = bladresregel4.substring(0, 40);
        }
        obj.setBladresregel4(bladresregel4);
    }
    
    public void HisPersadresDataOnDemand.setBladresregel5(HisPersadres obj, int index) {
        String bladresregel5 = "bladresregel5_" + index;
        if (bladresregel5.length() > 40) {
            bladresregel5 = bladresregel5.substring(0, 40);
        }
        obj.setBladresregel5(bladresregel5);
    }
    
    public void HisPersadresDataOnDemand.setBladresregel6(HisPersadres obj, int index) {
        String bladresregel6 = "bladresregel6_" + index;
        if (bladresregel6.length() > 40) {
            bladresregel6 = bladresregel6.substring(0, 40);
        }
        obj.setBladresregel6(bladresregel6);
    }
    
    public void HisPersadresDataOnDemand.setDataanvadresh(HisPersadres obj, int index) {
        BigDecimal dataanvadresh = BigDecimal.valueOf(index);
        obj.setDataanvadresh(dataanvadresh);
    }
    
    public void HisPersadresDataOnDemand.setDataanvgel(HisPersadres obj, int index) {
        BigDecimal dataanvgel = BigDecimal.valueOf(index);
        obj.setDataanvgel(dataanvgel);
    }
    
    public void HisPersadresDataOnDemand.setDateindegel(HisPersadres obj, int index) {
        BigDecimal dateindegel = BigDecimal.valueOf(index);
        obj.setDateindegel(dateindegel);
    }
    
    public void HisPersadresDataOnDemand.setDatvertrekuitnederland(HisPersadres obj, int index) {
        BigDecimal datvertrekuitnederland = BigDecimal.valueOf(index);
        obj.setDatvertrekuitnederland(datvertrekuitnederland);
    }
    
    public void HisPersadresDataOnDemand.setGem(HisPersadres obj, int index) {
        Partij gem = partijDataOnDemand.getRandomPartij();
        obj.setGem(gem);
    }
    
    public void HisPersadresDataOnDemand.setGemdeel(HisPersadres obj, int index) {
        String gemdeel = "gemdeel_" + index;
        if (gemdeel.length() > 24) {
            gemdeel = gemdeel.substring(0, 24);
        }
        obj.setGemdeel(gemdeel);
    }
    
    public void HisPersadresDataOnDemand.setHuisletter(HisPersadres obj, int index) {
        String huisletter = String.valueOf(index);
        if (huisletter.length() > 1) {
            huisletter = huisletter.substring(0, 1);
        }
        obj.setHuisletter(huisletter);
    }
    
    public void HisPersadresDataOnDemand.setHuisnr(HisPersadres obj, int index) {
        String huisnr = "hui_" + index;
        if (huisnr.length() > 5) {
            huisnr = huisnr.substring(0, 5);
        }
        obj.setHuisnr(huisnr);
    }
    
    public void HisPersadresDataOnDemand.setHuisnrtoevoeging(HisPersadres obj, int index) {
        String huisnrtoevoeging = "hu_" + index;
        if (huisnrtoevoeging.length() > 4) {
            huisnrtoevoeging = huisnrtoevoeging.substring(0, 4);
        }
        obj.setHuisnrtoevoeging(huisnrtoevoeging);
    }
    
    public void HisPersadresDataOnDemand.setIdentcodenraand(HisPersadres obj, int index) {
        String identcodenraand = "identcodenraan_" + index;
        if (identcodenraand.length() > 16) {
            identcodenraand = identcodenraand.substring(0, 16);
        }
        obj.setIdentcodenraand(identcodenraand);
    }
    
    public void HisPersadresDataOnDemand.setLand(HisPersadres obj, int index) {
        Land land = landDataOnDemand.getRandomLand();
        obj.setLand(land);
    }
    
    public void HisPersadresDataOnDemand.setLocoms(HisPersadres obj, int index) {
        String locoms = "locoms_" + index;
        if (locoms.length() > 40) {
            locoms = locoms.substring(0, 40);
        }
        obj.setLocoms(locoms);
    }
    
    public void HisPersadresDataOnDemand.setLoctovadres(HisPersadres obj, int index) {
        String loctovadres = "l" + index;
        if (loctovadres.length() > 2) {
            loctovadres = loctovadres.substring(0, 2);
        }
        obj.setLoctovadres(loctovadres);
    }
    
    public void HisPersadresDataOnDemand.setNor(HisPersadres obj, int index) {
        String nor = "nor_" + index;
        if (nor.length() > 80) {
            nor = nor.substring(0, 80);
        }
        obj.setNor(nor);
    }
    
    public void HisPersadresDataOnDemand.setPersadres(HisPersadres obj, int index) {
        Persadres persadres = persadresDataOnDemand.getRandomPersadres();
        obj.setPersadres(persadres);
    }
    
    public void HisPersadresDataOnDemand.setPostcode(HisPersadres obj, int index) {
        String postcode = "post_" + index;
        if (postcode.length() > 6) {
            postcode = postcode.substring(0, 6);
        }
        obj.setPostcode(postcode);
    }
    
    public void HisPersadresDataOnDemand.setRdnwijz(HisPersadres obj, int index) {
        Rdnwijzadres rdnwijz = rdnwijzadresDataOnDemand.getRandomRdnwijzadres();
        obj.setRdnwijz(rdnwijz);
    }
    
    public void HisPersadresDataOnDemand.setSrt(HisPersadres obj, int index) {
        Functieadres srt = functieadresDataOnDemand.getRandomFunctieadres();
        obj.setSrt(srt);
    }
    
    public void HisPersadresDataOnDemand.setTsreg(HisPersadres obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisPersadresDataOnDemand.setTsverval(HisPersadres obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public void HisPersadresDataOnDemand.setWpl(HisPersadres obj, int index) {
        Plaats wpl = plaatsDataOnDemand.getRandomPlaats();
        obj.setWpl(wpl);
    }
    
    public HisPersadres HisPersadresDataOnDemand.getSpecificHisPersadres(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisPersadres obj = data.get(index);
        Long id = obj.getId();
        return HisPersadres.findHisPersadres(id);
    }
    
    public HisPersadres HisPersadresDataOnDemand.getRandomHisPersadres() {
        init();
        HisPersadres obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisPersadres.findHisPersadres(id);
    }
    
    public boolean HisPersadresDataOnDemand.modifyHisPersadres(HisPersadres obj) {
        return false;
    }
    
    public void HisPersadresDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisPersadres.findHisPersadresEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisPersadres' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisPersadres>();
        for (int i = 0; i < 10; i++) {
            HisPersadres obj = getNewTransientHisPersadres(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
