// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Authenticatiemiddel;
import nl.bzk.brp.model.data.autaut.AuthenticatiemiddelDataOnDemand;
import nl.bzk.brp.model.data.autaut.Certificaat;
import nl.bzk.brp.model.data.autaut.CertificaatDataOnDemand;
import nl.bzk.brp.model.data.autaut.Functie;
import nl.bzk.brp.model.data.autaut.FunctieDataOnDemand;
import nl.bzk.brp.model.data.autaut.HisAuthenticatiemiddel;
import nl.bzk.brp.model.data.autaut.HisAuthenticatiemiddelDataOnDemand;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisAuthenticatiemiddelDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisAuthenticatiemiddelDataOnDemand: @Component;
    
    private Random HisAuthenticatiemiddelDataOnDemand.rnd = new SecureRandom();
    
    private List<HisAuthenticatiemiddel> HisAuthenticatiemiddelDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisAuthenticatiemiddelDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private AuthenticatiemiddelDataOnDemand HisAuthenticatiemiddelDataOnDemand.authenticatiemiddelDataOnDemand;
    
    @Autowired
    private CertificaatDataOnDemand HisAuthenticatiemiddelDataOnDemand.certificaatDataOnDemand;
    
    @Autowired
    private FunctieDataOnDemand HisAuthenticatiemiddelDataOnDemand.functieDataOnDemand;
    
    public HisAuthenticatiemiddel HisAuthenticatiemiddelDataOnDemand.getNewTransientHisAuthenticatiemiddel(int index) {
        HisAuthenticatiemiddel obj = new HisAuthenticatiemiddel();
        setActieinh(obj, index);
        setActieverval(obj, index);
        setAuthenticatiemiddel(obj, index);
        setCertificaattbvondertekening(obj, index);
        setCertificaattbvssl(obj, index);
        setFunctie(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        return obj;
    }
    
    public void HisAuthenticatiemiddelDataOnDemand.setActieinh(HisAuthenticatiemiddel obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisAuthenticatiemiddelDataOnDemand.setActieverval(HisAuthenticatiemiddel obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisAuthenticatiemiddelDataOnDemand.setAuthenticatiemiddel(HisAuthenticatiemiddel obj, int index) {
        Authenticatiemiddel authenticatiemiddel = authenticatiemiddelDataOnDemand.getRandomAuthenticatiemiddel();
        obj.setAuthenticatiemiddel(authenticatiemiddel);
    }
    
    public void HisAuthenticatiemiddelDataOnDemand.setCertificaattbvondertekening(HisAuthenticatiemiddel obj, int index) {
        Certificaat certificaattbvondertekening = certificaatDataOnDemand.getRandomCertificaat();
        obj.setCertificaattbvondertekening(certificaattbvondertekening);
    }
    
    public void HisAuthenticatiemiddelDataOnDemand.setCertificaattbvssl(HisAuthenticatiemiddel obj, int index) {
        Certificaat certificaattbvssl = certificaatDataOnDemand.getRandomCertificaat();
        obj.setCertificaattbvssl(certificaattbvssl);
    }
    
    public void HisAuthenticatiemiddelDataOnDemand.setFunctie(HisAuthenticatiemiddel obj, int index) {
        Functie functie = functieDataOnDemand.getRandomFunctie();
        obj.setFunctie(functie);
    }
    
    public void HisAuthenticatiemiddelDataOnDemand.setTsreg(HisAuthenticatiemiddel obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisAuthenticatiemiddelDataOnDemand.setTsverval(HisAuthenticatiemiddel obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public HisAuthenticatiemiddel HisAuthenticatiemiddelDataOnDemand.getSpecificHisAuthenticatiemiddel(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisAuthenticatiemiddel obj = data.get(index);
        Long id = obj.getId();
        return HisAuthenticatiemiddel.findHisAuthenticatiemiddel(id);
    }
    
    public HisAuthenticatiemiddel HisAuthenticatiemiddelDataOnDemand.getRandomHisAuthenticatiemiddel() {
        init();
        HisAuthenticatiemiddel obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisAuthenticatiemiddel.findHisAuthenticatiemiddel(id);
    }
    
    public boolean HisAuthenticatiemiddelDataOnDemand.modifyHisAuthenticatiemiddel(HisAuthenticatiemiddel obj) {
        return false;
    }
    
    public void HisAuthenticatiemiddelDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisAuthenticatiemiddel.findHisAuthenticatiemiddelEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisAuthenticatiemiddel' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisAuthenticatiemiddel>();
        for (int i = 0; i < 10; i++) {
            HisAuthenticatiemiddel obj = getNewTransientHisAuthenticatiemiddel(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
