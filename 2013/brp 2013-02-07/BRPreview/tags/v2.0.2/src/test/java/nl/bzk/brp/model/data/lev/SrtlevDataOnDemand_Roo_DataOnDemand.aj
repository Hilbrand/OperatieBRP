// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.lev;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.lev.Srtlev;
import nl.bzk.brp.model.data.lev.SrtlevDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect SrtlevDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SrtlevDataOnDemand: @Component;
    
    private Random SrtlevDataOnDemand.rnd = new SecureRandom();
    
    private List<Srtlev> SrtlevDataOnDemand.data;
    
    public Srtlev SrtlevDataOnDemand.getNewTransientSrtlev(int index) {
        Srtlev obj = new Srtlev();
        setNaam(obj, index);
        return obj;
    }
    
    public void SrtlevDataOnDemand.setNaam(Srtlev obj, int index) {
        String naam = "naam_" + index;
        if (naam.length() > 40) {
            naam = new Random().nextInt(10) + naam.substring(1, 40);
        }
        obj.setNaam(naam);
    }
    
    public Srtlev SrtlevDataOnDemand.getSpecificSrtlev(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Srtlev obj = data.get(index);
        Long id = obj.getId();
        return Srtlev.findSrtlev(id);
    }
    
    public Srtlev SrtlevDataOnDemand.getRandomSrtlev() {
        init();
        Srtlev obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Srtlev.findSrtlev(id);
    }
    
    public boolean SrtlevDataOnDemand.modifySrtlev(Srtlev obj) {
        return false;
    }
    
    public void SrtlevDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Srtlev.findSrtlevEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Srtlev' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Srtlev>();
        for (int i = 0; i < 10; i++) {
            Srtlev obj = getNewTransientSrtlev(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
