// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import nl.bzk.brp.model.data.kern.HisPersbijhverantwoordelijk;
import nl.bzk.brp.model.data.kern.HisPersbijhverantwoordelijkDataOnDemand;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import nl.bzk.brp.model.data.kern.Verantwoordelijke;
import nl.bzk.brp.model.data.kern.VerantwoordelijkeDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisPersbijhverantwoordelijkDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisPersbijhverantwoordelijkDataOnDemand: @Component;
    
    private Random HisPersbijhverantwoordelijkDataOnDemand.rnd = new SecureRandom();
    
    private List<HisPersbijhverantwoordelijk> HisPersbijhverantwoordelijkDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisPersbijhverantwoordelijkDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private PersDataOnDemand HisPersbijhverantwoordelijkDataOnDemand.persDataOnDemand;
    
    @Autowired
    private VerantwoordelijkeDataOnDemand HisPersbijhverantwoordelijkDataOnDemand.verantwoordelijkeDataOnDemand;
    
    public HisPersbijhverantwoordelijk HisPersbijhverantwoordelijkDataOnDemand.getNewTransientHisPersbijhverantwoordelijk(int index) {
        HisPersbijhverantwoordelijk obj = new HisPersbijhverantwoordelijk();
        setActieaanpgel(obj, index);
        setActieinh(obj, index);
        setActieverval(obj, index);
        setDataanvgel(obj, index);
        setDateindegel(obj, index);
        setPers(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        setVerantwoordelijke(obj, index);
        return obj;
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.setActieaanpgel(HisPersbijhverantwoordelijk obj, int index) {
        Actie actieaanpgel = actieDataOnDemand.getRandomActie();
        obj.setActieaanpgel(actieaanpgel);
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.setActieinh(HisPersbijhverantwoordelijk obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.setActieverval(HisPersbijhverantwoordelijk obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.setDataanvgel(HisPersbijhverantwoordelijk obj, int index) {
        BigDecimal dataanvgel = BigDecimal.valueOf(index);
        obj.setDataanvgel(dataanvgel);
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.setDateindegel(HisPersbijhverantwoordelijk obj, int index) {
        BigDecimal dateindegel = BigDecimal.valueOf(index);
        obj.setDateindegel(dateindegel);
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.setPers(HisPersbijhverantwoordelijk obj, int index) {
        Pers pers = persDataOnDemand.getRandomPers();
        obj.setPers(pers);
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.setTsreg(HisPersbijhverantwoordelijk obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.setTsverval(HisPersbijhverantwoordelijk obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.setVerantwoordelijke(HisPersbijhverantwoordelijk obj, int index) {
        Verantwoordelijke verantwoordelijke = verantwoordelijkeDataOnDemand.getRandomVerantwoordelijke();
        obj.setVerantwoordelijke(verantwoordelijke);
    }
    
    public HisPersbijhverantwoordelijk HisPersbijhverantwoordelijkDataOnDemand.getSpecificHisPersbijhverantwoordelijk(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisPersbijhverantwoordelijk obj = data.get(index);
        Long id = obj.getId();
        return HisPersbijhverantwoordelijk.findHisPersbijhverantwoordelijk(id);
    }
    
    public HisPersbijhverantwoordelijk HisPersbijhverantwoordelijkDataOnDemand.getRandomHisPersbijhverantwoordelijk() {
        init();
        HisPersbijhverantwoordelijk obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisPersbijhverantwoordelijk.findHisPersbijhverantwoordelijk(id);
    }
    
    public boolean HisPersbijhverantwoordelijkDataOnDemand.modifyHisPersbijhverantwoordelijk(HisPersbijhverantwoordelijk obj) {
        return false;
    }
    
    public void HisPersbijhverantwoordelijkDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisPersbijhverantwoordelijk.findHisPersbijhverantwoordelijkEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisPersbijhverantwoordelijk' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisPersbijhverantwoordelijk>();
        for (int i = 0; i < 10; i++) {
            HisPersbijhverantwoordelijk obj = getNewTransientHisPersbijhverantwoordelijk(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
