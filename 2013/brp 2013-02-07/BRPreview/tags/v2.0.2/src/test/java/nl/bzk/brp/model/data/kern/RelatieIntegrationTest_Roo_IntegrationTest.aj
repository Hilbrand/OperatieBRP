// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.util.List;
import nl.bzk.brp.model.data.kern.Relatie;
import nl.bzk.brp.model.data.kern.RelatieDataOnDemand;
import nl.bzk.brp.model.data.kern.RelatieIntegrationTest;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect RelatieIntegrationTest_Roo_IntegrationTest {
    
    declare @type: RelatieIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: RelatieIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: RelatieIntegrationTest: @Transactional;
    
    @Autowired
    private RelatieDataOnDemand RelatieIntegrationTest.dod;
    
    @Test
    public void RelatieIntegrationTest.testCountRelaties() {
        Assert.assertNotNull("Data on demand for 'Relatie' failed to initialize correctly", dod.getRandomRelatie());
        long count = Relatie.countRelaties();
        Assert.assertTrue("Counter for 'Relatie' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void RelatieIntegrationTest.testFindRelatie() {
        Relatie obj = dod.getRandomRelatie();
        Assert.assertNotNull("Data on demand for 'Relatie' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Relatie' failed to provide an identifier", id);
        obj = Relatie.findRelatie(id);
        Assert.assertNotNull("Find method for 'Relatie' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Relatie' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void RelatieIntegrationTest.testFindAllRelaties() {
        Assert.assertNotNull("Data on demand for 'Relatie' failed to initialize correctly", dod.getRandomRelatie());
        long count = Relatie.countRelaties();
        Assert.assertTrue("Too expensive to perform a find all test for 'Relatie', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Relatie> result = Relatie.findAllRelaties();
        Assert.assertNotNull("Find all method for 'Relatie' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Relatie' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void RelatieIntegrationTest.testFindRelatieEntries() {
        Assert.assertNotNull("Data on demand for 'Relatie' failed to initialize correctly", dod.getRandomRelatie());
        long count = Relatie.countRelaties();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Relatie> result = Relatie.findRelatieEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Relatie' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Relatie' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void RelatieIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'Relatie' failed to initialize correctly", dod.getRandomRelatie());
        Relatie obj = dod.getNewTransientRelatie(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Relatie' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Relatie' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'Relatie' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void RelatieIntegrationTest.testRemove() {
        Relatie obj = dod.getRandomRelatie();
        Assert.assertNotNull("Data on demand for 'Relatie' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Relatie' failed to provide an identifier", id);
        obj = Relatie.findRelatie(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Relatie' with identifier '" + id + "'", Relatie.findRelatie(id));
    }
    
}
