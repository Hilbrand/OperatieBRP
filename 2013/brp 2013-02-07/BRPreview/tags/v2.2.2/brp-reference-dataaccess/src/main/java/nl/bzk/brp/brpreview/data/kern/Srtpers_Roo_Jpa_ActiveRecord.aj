// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.brpreview.data.kern;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nl.bzk.brp.brpreview.data.kern.Srtpers;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Srtpers_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Srtpers.entityManager;
    
    public static final EntityManager Srtpers.entityManager() {
        EntityManager em = new Srtpers().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Srtpers.countSrtperses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Srtpers o", Long.class).getSingleResult();
    }
    
    public static List<Srtpers> Srtpers.findAllSrtperses() {
        return entityManager().createQuery("SELECT o FROM Srtpers o", Srtpers.class).getResultList();
    }
    
    public static Srtpers Srtpers.findSrtpers(Short id) {
        if (id == null) return null;
        return entityManager().find(Srtpers.class, id);
    }
    
    public static List<Srtpers> Srtpers.findSrtpersEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Srtpers o", Srtpers.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Srtpers.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Srtpers.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Srtpers attached = Srtpers.findSrtpers(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Srtpers.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Srtpers.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Srtpers Srtpers.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Srtpers merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
