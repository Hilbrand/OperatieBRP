// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import nl.bzk.brp.model.data.autaut.Doelbinding;
import nl.bzk.brp.model.data.lev.Abonnement;
import nl.bzk.brp.model.data.lev.Abonnementgegevenselement;
import nl.bzk.brp.model.data.lev.Abonnementsrtber;
import nl.bzk.brp.model.data.lev.HisAbonnement;
import nl.bzk.brp.model.data.lev.Lev;
import nl.bzk.brp.model.data.lev.Srtabonnement;
import nl.bzk.brp.model.web.AbonnementController;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AbonnementController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String AbonnementController.create(@Valid Abonnement abonnement, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, abonnement);
            return "abonnements/create";
        }
        uiModel.asMap().clear();
        abonnement.persist();
        return "redirect:/abonnements/" + encodeUrlPathSegment(abonnement.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String AbonnementController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Abonnement());
        return "abonnements/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String AbonnementController.show(@PathVariable("id") Integer id, Model uiModel) {
        uiModel.addAttribute("abonnement", Abonnement.findAbonnement(id));
        uiModel.addAttribute("itemId", id);
        return "abonnements/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String AbonnementController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("abonnements", Abonnement.findAbonnementEntries(firstResult, sizeNo));
            float nrOfPages = (float) Abonnement.countAbonnements() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("abonnements", Abonnement.findAllAbonnements());
        }
        return "abonnements/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String AbonnementController.update(@Valid Abonnement abonnement, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, abonnement);
            return "abonnements/update";
        }
        uiModel.asMap().clear();
        abonnement.merge();
        return "redirect:/abonnements/" + encodeUrlPathSegment(abonnement.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String AbonnementController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, Abonnement.findAbonnement(id));
        return "abonnements/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String AbonnementController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Abonnement abonnement = Abonnement.findAbonnement(id);
        abonnement.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/abonnements";
    }
    
    void AbonnementController.populateEditForm(Model uiModel, Abonnement abonnement) {
        uiModel.addAttribute("abonnement", abonnement);
        uiModel.addAttribute("doelbindings", Doelbinding.findAllDoelbindings());
        uiModel.addAttribute("abonnementgegevenselements", Abonnementgegevenselement.findAllAbonnementgegevenselements());
        uiModel.addAttribute("abonnementsrtbers", Abonnementsrtber.findAllAbonnementsrtbers());
        uiModel.addAttribute("hisabonnements", HisAbonnement.findAllHisAbonnements());
        uiModel.addAttribute("levs", Lev.findAllLevs());
        uiModel.addAttribute("srtabonnements", Srtabonnement.findAllSrtabonnements());
    }
    
    String AbonnementController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
