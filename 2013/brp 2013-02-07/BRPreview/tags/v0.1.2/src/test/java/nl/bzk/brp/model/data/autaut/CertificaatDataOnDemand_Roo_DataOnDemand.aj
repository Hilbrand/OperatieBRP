// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Certificaat;
import nl.bzk.brp.model.data.autaut.CertificaatDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect CertificaatDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CertificaatDataOnDemand: @Component;
    
    private Random CertificaatDataOnDemand.rnd = new SecureRandom();
    
    private List<Certificaat> CertificaatDataOnDemand.data;
    
    public Certificaat CertificaatDataOnDemand.getNewTransientCertificaat(int index) {
        Certificaat obj = new Certificaat();
        setSerial(obj, index);
        setSignature(obj, index);
        setSubject(obj, index);
        return obj;
    }
    
    public void CertificaatDataOnDemand.setSerial(Certificaat obj, int index) {
        BigDecimal serial = BigDecimal.valueOf(index);
        obj.setSerial(serial);
    }
    
    public void CertificaatDataOnDemand.setSignature(Certificaat obj, int index) {
        String signature = "signature_" + index;
        if (signature.length() > 2048) {
            signature = new Random().nextInt(10) + signature.substring(1, 2048);
        }
        obj.setSignature(signature);
    }
    
    public void CertificaatDataOnDemand.setSubject(Certificaat obj, int index) {
        String subject = "subject_" + index;
        if (subject.length() > 1024) {
            subject = new Random().nextInt(10) + subject.substring(1, 1024);
        }
        obj.setSubject(subject);
    }
    
    public Certificaat CertificaatDataOnDemand.getSpecificCertificaat(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Certificaat obj = data.get(index);
        Integer id = obj.getId();
        return Certificaat.findCertificaat(id);
    }
    
    public Certificaat CertificaatDataOnDemand.getRandomCertificaat() {
        init();
        Certificaat obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Certificaat.findCertificaat(id);
    }
    
    public boolean CertificaatDataOnDemand.modifyCertificaat(Certificaat obj) {
        return false;
    }
    
    public void CertificaatDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Certificaat.findCertificaatEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Certificaat' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Certificaat>();
        for (int i = 0; i < 10; i++) {
            Certificaat obj = getNewTransientCertificaat(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
