// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.lev;

import java.util.List;
import nl.bzk.brp.model.data.lev.Levcommunicatie;
import nl.bzk.brp.model.data.lev.LevcommunicatieDataOnDemand;
import nl.bzk.brp.model.data.lev.LevcommunicatieIntegrationTest;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect LevcommunicatieIntegrationTest_Roo_IntegrationTest {
    
    declare @type: LevcommunicatieIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: LevcommunicatieIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: LevcommunicatieIntegrationTest: @Transactional;
    
    @Autowired
    private LevcommunicatieDataOnDemand LevcommunicatieIntegrationTest.dod;
    
    @Test
    public void LevcommunicatieIntegrationTest.testCountLevcommunicaties() {
        Assert.assertNotNull("Data on demand for 'Levcommunicatie' failed to initialize correctly", dod.getRandomLevcommunicatie());
        long count = Levcommunicatie.countLevcommunicaties();
        Assert.assertTrue("Counter for 'Levcommunicatie' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void LevcommunicatieIntegrationTest.testFindLevcommunicatie() {
        Levcommunicatie obj = dod.getRandomLevcommunicatie();
        Assert.assertNotNull("Data on demand for 'Levcommunicatie' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Levcommunicatie' failed to provide an identifier", id);
        obj = Levcommunicatie.findLevcommunicatie(id);
        Assert.assertNotNull("Find method for 'Levcommunicatie' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Levcommunicatie' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void LevcommunicatieIntegrationTest.testFindAllLevcommunicaties() {
        Assert.assertNotNull("Data on demand for 'Levcommunicatie' failed to initialize correctly", dod.getRandomLevcommunicatie());
        long count = Levcommunicatie.countLevcommunicaties();
        Assert.assertTrue("Too expensive to perform a find all test for 'Levcommunicatie', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Levcommunicatie> result = Levcommunicatie.findAllLevcommunicaties();
        Assert.assertNotNull("Find all method for 'Levcommunicatie' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Levcommunicatie' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void LevcommunicatieIntegrationTest.testFindLevcommunicatieEntries() {
        Assert.assertNotNull("Data on demand for 'Levcommunicatie' failed to initialize correctly", dod.getRandomLevcommunicatie());
        long count = Levcommunicatie.countLevcommunicaties();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Levcommunicatie> result = Levcommunicatie.findLevcommunicatieEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Levcommunicatie' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Levcommunicatie' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void LevcommunicatieIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'Levcommunicatie' failed to initialize correctly", dod.getRandomLevcommunicatie());
        Levcommunicatie obj = dod.getNewTransientLevcommunicatie(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Levcommunicatie' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Levcommunicatie' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'Levcommunicatie' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void LevcommunicatieIntegrationTest.testRemove() {
        Levcommunicatie obj = dod.getRandomLevcommunicatie();
        Assert.assertNotNull("Data on demand for 'Levcommunicatie' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Levcommunicatie' failed to provide an identifier", id);
        obj = Levcommunicatie.findLevcommunicatie(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Levcommunicatie' with identifier '" + id + "'", Levcommunicatie.findLevcommunicatie(id));
    }
    
}
