// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.brm;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.brm.Regeleffect;
import nl.bzk.brp.model.data.brm.RegeleffectDataOnDemand;
import nl.bzk.brp.model.data.brm.Regelimplementatie;
import nl.bzk.brp.model.data.brm.RegelimplementatieDataOnDemand;
import nl.bzk.brp.model.data.brm.Regelimplementatiesituatie;
import nl.bzk.brp.model.data.brm.RegelimplementatiesituatieDataOnDemand;
import nl.bzk.brp.model.data.kern.Rdnopschorting;
import nl.bzk.brp.model.data.kern.RdnopschortingDataOnDemand;
import nl.bzk.brp.model.data.kern.Verantwoordelijke;
import nl.bzk.brp.model.data.kern.VerantwoordelijkeDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RegelimplementatiesituatieDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RegelimplementatiesituatieDataOnDemand: @Component;
    
    private Random RegelimplementatiesituatieDataOnDemand.rnd = new SecureRandom();
    
    private List<Regelimplementatiesituatie> RegelimplementatiesituatieDataOnDemand.data;
    
    @Autowired
    private VerantwoordelijkeDataOnDemand RegelimplementatiesituatieDataOnDemand.verantwoordelijkeDataOnDemand;
    
    @Autowired
    private RegeleffectDataOnDemand RegelimplementatiesituatieDataOnDemand.regeleffectDataOnDemand;
    
    @Autowired
    private RdnopschortingDataOnDemand RegelimplementatiesituatieDataOnDemand.rdnopschortingDataOnDemand;
    
    @Autowired
    private RegelimplementatieDataOnDemand RegelimplementatiesituatieDataOnDemand.regelimplementatieDataOnDemand;
    
    public Regelimplementatiesituatie RegelimplementatiesituatieDataOnDemand.getNewTransientRegelimplementatiesituatie(int index) {
        Regelimplementatiesituatie obj = new Regelimplementatiesituatie();
        setBijhverantwoordelijkheid(obj, index);
        setEffect(obj, index);
        setIndactief(obj, index);
        setIndopgeschort(obj, index);
        setRdnopschorting(obj, index);
        setRegelimplementatie(obj, index);
        setRegelimplementatiesituatiest(obj, index);
        return obj;
    }
    
    public void RegelimplementatiesituatieDataOnDemand.setBijhverantwoordelijkheid(Regelimplementatiesituatie obj, int index) {
        Verantwoordelijke bijhverantwoordelijkheid = verantwoordelijkeDataOnDemand.getRandomVerantwoordelijke();
        obj.setBijhverantwoordelijkheid(bijhverantwoordelijkheid);
    }
    
    public void RegelimplementatiesituatieDataOnDemand.setEffect(Regelimplementatiesituatie obj, int index) {
        Regeleffect effect = regeleffectDataOnDemand.getRandomRegeleffect();
        obj.setEffect(effect);
    }
    
    public void RegelimplementatiesituatieDataOnDemand.setIndactief(Regelimplementatiesituatie obj, int index) {
        Boolean indactief = Boolean.TRUE;
        obj.setIndactief(indactief);
    }
    
    public void RegelimplementatiesituatieDataOnDemand.setIndopgeschort(Regelimplementatiesituatie obj, int index) {
        Boolean indopgeschort = Boolean.TRUE;
        obj.setIndopgeschort(indopgeschort);
    }
    
    public void RegelimplementatiesituatieDataOnDemand.setRdnopschorting(Regelimplementatiesituatie obj, int index) {
        Rdnopschorting rdnopschorting = rdnopschortingDataOnDemand.getRandomRdnopschorting();
        obj.setRdnopschorting(rdnopschorting);
    }
    
    public void RegelimplementatiesituatieDataOnDemand.setRegelimplementatie(Regelimplementatiesituatie obj, int index) {
        Regelimplementatie regelimplementatie = regelimplementatieDataOnDemand.getRandomRegelimplementatie();
        obj.setRegelimplementatie(regelimplementatie);
    }
    
    public void RegelimplementatiesituatieDataOnDemand.setRegelimplementatiesituatiest(Regelimplementatiesituatie obj, int index) {
        String regelimplementatiesituatiest = String.valueOf(index);
        if (regelimplementatiesituatiest.length() > 1) {
            regelimplementatiesituatiest = regelimplementatiesituatiest.substring(0, 1);
        }
        obj.setRegelimplementatiesituatiest(regelimplementatiesituatiest);
    }
    
    public Regelimplementatiesituatie RegelimplementatiesituatieDataOnDemand.getSpecificRegelimplementatiesituatie(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Regelimplementatiesituatie obj = data.get(index);
        Integer id = obj.getId();
        return Regelimplementatiesituatie.findRegelimplementatiesituatie(id);
    }
    
    public Regelimplementatiesituatie RegelimplementatiesituatieDataOnDemand.getRandomRegelimplementatiesituatie() {
        init();
        Regelimplementatiesituatie obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Regelimplementatiesituatie.findRegelimplementatiesituatie(id);
    }
    
    public boolean RegelimplementatiesituatieDataOnDemand.modifyRegelimplementatiesituatie(Regelimplementatiesituatie obj) {
        return false;
    }
    
    public void RegelimplementatiesituatieDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Regelimplementatiesituatie.findRegelimplementatiesituatieEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Regelimplementatiesituatie' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Regelimplementatiesituatie>();
        for (int i = 0; i < 10; i++) {
            Regelimplementatiesituatie obj = getNewTransientRegelimplementatiesituatie(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
