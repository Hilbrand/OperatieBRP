// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import nl.bzk.brp.model.data.kern.Geslachtsaand;
import nl.bzk.brp.model.data.kern.GeslachtsaandDataOnDemand;
import nl.bzk.brp.model.data.kern.HisPersgeslachtsaand;
import nl.bzk.brp.model.data.kern.HisPersgeslachtsaandDataOnDemand;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisPersgeslachtsaandDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisPersgeslachtsaandDataOnDemand: @Component;
    
    private Random HisPersgeslachtsaandDataOnDemand.rnd = new SecureRandom();
    
    private List<HisPersgeslachtsaand> HisPersgeslachtsaandDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisPersgeslachtsaandDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private GeslachtsaandDataOnDemand HisPersgeslachtsaandDataOnDemand.geslachtsaandDataOnDemand;
    
    @Autowired
    private PersDataOnDemand HisPersgeslachtsaandDataOnDemand.persDataOnDemand;
    
    public HisPersgeslachtsaand HisPersgeslachtsaandDataOnDemand.getNewTransientHisPersgeslachtsaand(int index) {
        HisPersgeslachtsaand obj = new HisPersgeslachtsaand();
        setActieaanpgel(obj, index);
        setActieinh(obj, index);
        setActieverval(obj, index);
        setDataanvgel(obj, index);
        setDateindegel(obj, index);
        setGeslachtsaand(obj, index);
        setPers(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        return obj;
    }
    
    public void HisPersgeslachtsaandDataOnDemand.setActieaanpgel(HisPersgeslachtsaand obj, int index) {
        Actie actieaanpgel = actieDataOnDemand.getRandomActie();
        obj.setActieaanpgel(actieaanpgel);
    }
    
    public void HisPersgeslachtsaandDataOnDemand.setActieinh(HisPersgeslachtsaand obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisPersgeslachtsaandDataOnDemand.setActieverval(HisPersgeslachtsaand obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisPersgeslachtsaandDataOnDemand.setDataanvgel(HisPersgeslachtsaand obj, int index) {
        BigDecimal dataanvgel = BigDecimal.valueOf(index);
        obj.setDataanvgel(dataanvgel);
    }
    
    public void HisPersgeslachtsaandDataOnDemand.setDateindegel(HisPersgeslachtsaand obj, int index) {
        BigDecimal dateindegel = BigDecimal.valueOf(index);
        obj.setDateindegel(dateindegel);
    }
    
    public void HisPersgeslachtsaandDataOnDemand.setGeslachtsaand(HisPersgeslachtsaand obj, int index) {
        Geslachtsaand geslachtsaand = geslachtsaandDataOnDemand.getRandomGeslachtsaand();
        obj.setGeslachtsaand(geslachtsaand);
    }
    
    public void HisPersgeslachtsaandDataOnDemand.setPers(HisPersgeslachtsaand obj, int index) {
        Pers pers = persDataOnDemand.getRandomPers();
        obj.setPers(pers);
    }
    
    public void HisPersgeslachtsaandDataOnDemand.setTsreg(HisPersgeslachtsaand obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisPersgeslachtsaandDataOnDemand.setTsverval(HisPersgeslachtsaand obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public HisPersgeslachtsaand HisPersgeslachtsaandDataOnDemand.getSpecificHisPersgeslachtsaand(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisPersgeslachtsaand obj = data.get(index);
        Long id = obj.getId();
        return HisPersgeslachtsaand.findHisPersgeslachtsaand(id);
    }
    
    public HisPersgeslachtsaand HisPersgeslachtsaandDataOnDemand.getRandomHisPersgeslachtsaand() {
        init();
        HisPersgeslachtsaand obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisPersgeslachtsaand.findHisPersgeslachtsaand(id);
    }
    
    public boolean HisPersgeslachtsaandDataOnDemand.modifyHisPersgeslachtsaand(HisPersgeslachtsaand obj) {
        return false;
    }
    
    public void HisPersgeslachtsaandDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisPersgeslachtsaand.findHisPersgeslachtsaandEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisPersgeslachtsaand' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisPersgeslachtsaand>();
        for (int i = 0; i < 10; i++) {
            HisPersgeslachtsaand obj = getNewTransientHisPersgeslachtsaand(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
