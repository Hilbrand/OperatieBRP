// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Doelbinding;
import nl.bzk.brp.model.data.autaut.DoelbindingDataOnDemand;
import nl.bzk.brp.model.data.autaut.Doelbindinggegevenselement;
import nl.bzk.brp.model.data.autaut.DoelbindinggegevenselementDataOnDemand;
import nl.bzk.brp.model.data.kern.Dbobject;
import nl.bzk.brp.model.data.kern.DbobjectDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DoelbindinggegevenselementDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DoelbindinggegevenselementDataOnDemand: @Component;
    
    private Random DoelbindinggegevenselementDataOnDemand.rnd = new SecureRandom();
    
    private List<Doelbindinggegevenselement> DoelbindinggegevenselementDataOnDemand.data;
    
    @Autowired
    private DoelbindingDataOnDemand DoelbindinggegevenselementDataOnDemand.doelbindingDataOnDemand;
    
    @Autowired
    private DbobjectDataOnDemand DoelbindinggegevenselementDataOnDemand.dbobjectDataOnDemand;
    
    public Doelbindinggegevenselement DoelbindinggegevenselementDataOnDemand.getNewTransientDoelbindinggegevenselement(int index) {
        Doelbindinggegevenselement obj = new Doelbindinggegevenselement();
        setDoelbinding(obj, index);
        setGegevenselement(obj, index);
        return obj;
    }
    
    public void DoelbindinggegevenselementDataOnDemand.setDoelbinding(Doelbindinggegevenselement obj, int index) {
        Doelbinding doelbinding = doelbindingDataOnDemand.getRandomDoelbinding();
        obj.setDoelbinding(doelbinding);
    }
    
    public void DoelbindinggegevenselementDataOnDemand.setGegevenselement(Doelbindinggegevenselement obj, int index) {
        Dbobject gegevenselement = dbobjectDataOnDemand.getRandomDbobject();
        obj.setGegevenselement(gegevenselement);
    }
    
    public Doelbindinggegevenselement DoelbindinggegevenselementDataOnDemand.getSpecificDoelbindinggegevenselement(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Doelbindinggegevenselement obj = data.get(index);
        Integer id = obj.getId();
        return Doelbindinggegevenselement.findDoelbindinggegevenselement(id);
    }
    
    public Doelbindinggegevenselement DoelbindinggegevenselementDataOnDemand.getRandomDoelbindinggegevenselement() {
        init();
        Doelbindinggegevenselement obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Doelbindinggegevenselement.findDoelbindinggegevenselement(id);
    }
    
    public boolean DoelbindinggegevenselementDataOnDemand.modifyDoelbindinggegevenselement(Doelbindinggegevenselement obj) {
        return false;
    }
    
    public void DoelbindinggegevenselementDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Doelbindinggegevenselement.findDoelbindinggegevenselementEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Doelbindinggegevenselement' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Doelbindinggegevenselement>();
        for (int i = 0; i < 10; i++) {
            Doelbindinggegevenselement obj = getNewTransientDoelbindinggegevenselement(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
