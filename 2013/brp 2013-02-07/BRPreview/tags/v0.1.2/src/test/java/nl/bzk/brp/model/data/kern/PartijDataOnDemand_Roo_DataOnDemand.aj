// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import nl.bzk.brp.model.data.kern.Sector;
import nl.bzk.brp.model.data.kern.SectorDataOnDemand;
import nl.bzk.brp.model.data.kern.Srtpartij;
import nl.bzk.brp.model.data.kern.SrtpartijDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PartijDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PartijDataOnDemand: @Component;
    
    private Random PartijDataOnDemand.rnd = new SecureRandom();
    
    private List<Partij> PartijDataOnDemand.data;
    
    @Autowired
    private SectorDataOnDemand PartijDataOnDemand.sectorDataOnDemand;
    
    @Autowired
    private SrtpartijDataOnDemand PartijDataOnDemand.srtpartijDataOnDemand;
    
    public Partij PartijDataOnDemand.getNewTransientPartij(int index) {
        Partij obj = new Partij();
        setDataanv(obj, index);
        setDateinde(obj, index);
        setGemcode(obj, index);
        setGemstatushis(obj, index);
        setNaam(obj, index);
        setOnderdeelvan(obj, index);
        setPartijstatushis(obj, index);
        setSector(obj, index);
        setSrt(obj, index);
        setVoortzettendegem(obj, index);
        return obj;
    }
    
    public void PartijDataOnDemand.setDataanv(Partij obj, int index) {
        BigDecimal dataanv = BigDecimal.valueOf(index);
        obj.setDataanv(dataanv);
    }
    
    public void PartijDataOnDemand.setDateinde(Partij obj, int index) {
        BigDecimal dateinde = BigDecimal.valueOf(index);
        obj.setDateinde(dateinde);
    }
    
    public void PartijDataOnDemand.setGemcode(Partij obj, int index) {
        String gemcode = "ge_" + index;
        if (gemcode.length() > 4) {
            gemcode = gemcode.substring(0, 4);
        }
        obj.setGemcode(gemcode);
    }
    
    public void PartijDataOnDemand.setGemstatushis(Partij obj, int index) {
        String gemstatushis = String.valueOf(index);
        if (gemstatushis.length() > 1) {
            gemstatushis = gemstatushis.substring(0, 1);
        }
        obj.setGemstatushis(gemstatushis);
    }
    
    public void PartijDataOnDemand.setNaam(Partij obj, int index) {
        String naam = "naam_" + index;
        if (naam.length() > 40) {
            naam = new Random().nextInt(10) + naam.substring(1, 40);
        }
        obj.setNaam(naam);
    }
    
    public void PartijDataOnDemand.setOnderdeelvan(Partij obj, int index) {
        Partij onderdeelvan = obj;
        obj.setOnderdeelvan(onderdeelvan);
    }
    
    public void PartijDataOnDemand.setPartijstatushis(Partij obj, int index) {
        String partijstatushis = String.valueOf(index);
        if (partijstatushis.length() > 1) {
            partijstatushis = partijstatushis.substring(0, 1);
        }
        obj.setPartijstatushis(partijstatushis);
    }
    
    public void PartijDataOnDemand.setSector(Partij obj, int index) {
        Sector sector = sectorDataOnDemand.getRandomSector();
        obj.setSector(sector);
    }
    
    public void PartijDataOnDemand.setSrt(Partij obj, int index) {
        Srtpartij srt = srtpartijDataOnDemand.getRandomSrtpartij();
        obj.setSrt(srt);
    }
    
    public void PartijDataOnDemand.setVoortzettendegem(Partij obj, int index) {
        Partij voortzettendegem = obj;
        obj.setVoortzettendegem(voortzettendegem);
    }
    
    public Partij PartijDataOnDemand.getSpecificPartij(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Partij obj = data.get(index);
        Integer id = obj.getId();
        return Partij.findPartij(id);
    }
    
    public Partij PartijDataOnDemand.getRandomPartij() {
        init();
        Partij obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Partij.findPartij(id);
    }
    
    public boolean PartijDataOnDemand.modifyPartij(Partij obj) {
        return false;
    }
    
    public void PartijDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Partij.findPartijEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Partij' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Partij>();
        for (int i = 0; i < 10; i++) {
            Partij obj = getNewTransientPartij(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
