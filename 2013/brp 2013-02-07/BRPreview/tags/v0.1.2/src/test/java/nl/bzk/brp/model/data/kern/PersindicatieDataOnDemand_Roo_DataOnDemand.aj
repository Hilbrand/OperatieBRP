// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import nl.bzk.brp.model.data.kern.Persindicatie;
import nl.bzk.brp.model.data.kern.PersindicatieDataOnDemand;
import nl.bzk.brp.model.data.kern.Srtindicatie;
import nl.bzk.brp.model.data.kern.SrtindicatieDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PersindicatieDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersindicatieDataOnDemand: @Component;
    
    private Random PersindicatieDataOnDemand.rnd = new SecureRandom();
    
    private List<Persindicatie> PersindicatieDataOnDemand.data;
    
    @Autowired
    private PersDataOnDemand PersindicatieDataOnDemand.persDataOnDemand;
    
    @Autowired
    private SrtindicatieDataOnDemand PersindicatieDataOnDemand.srtindicatieDataOnDemand;
    
    public Persindicatie PersindicatieDataOnDemand.getNewTransientPersindicatie(int index) {
        Persindicatie obj = new Persindicatie();
        setPers(obj, index);
        setPersindicatiestatushis(obj, index);
        setSrt(obj, index);
        setWaarde(obj, index);
        return obj;
    }
    
    public void PersindicatieDataOnDemand.setPers(Persindicatie obj, int index) {
        Pers pers = persDataOnDemand.getRandomPers();
        obj.setPers(pers);
    }
    
    public void PersindicatieDataOnDemand.setPersindicatiestatushis(Persindicatie obj, int index) {
        String persindicatiestatushis = String.valueOf(index);
        if (persindicatiestatushis.length() > 1) {
            persindicatiestatushis = persindicatiestatushis.substring(0, 1);
        }
        obj.setPersindicatiestatushis(persindicatiestatushis);
    }
    
    public void PersindicatieDataOnDemand.setSrt(Persindicatie obj, int index) {
        Srtindicatie srt = srtindicatieDataOnDemand.getRandomSrtindicatie();
        obj.setSrt(srt);
    }
    
    public void PersindicatieDataOnDemand.setWaarde(Persindicatie obj, int index) {
        Boolean waarde = Boolean.TRUE;
        obj.setWaarde(waarde);
    }
    
    public Persindicatie PersindicatieDataOnDemand.getSpecificPersindicatie(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Persindicatie obj = data.get(index);
        Long id = obj.getId();
        return Persindicatie.findPersindicatie(id);
    }
    
    public Persindicatie PersindicatieDataOnDemand.getRandomPersindicatie() {
        init();
        Persindicatie obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Persindicatie.findPersindicatie(id);
    }
    
    public boolean PersindicatieDataOnDemand.modifyPersindicatie(Persindicatie obj) {
        return false;
    }
    
    public void PersindicatieDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Persindicatie.findPersindicatieEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Persindicatie' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Persindicatie>();
        for (int i = 0; i < 10; i++) {
            Persindicatie obj = getNewTransientPersindicatie(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
