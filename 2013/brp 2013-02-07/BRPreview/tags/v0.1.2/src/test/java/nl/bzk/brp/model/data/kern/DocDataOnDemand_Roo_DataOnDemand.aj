// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Doc;
import nl.bzk.brp.model.data.kern.DocDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import nl.bzk.brp.model.data.kern.Srtdoc;
import nl.bzk.brp.model.data.kern.SrtdocDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DocDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DocDataOnDemand: @Component;
    
    private Random DocDataOnDemand.rnd = new SecureRandom();
    
    private List<Doc> DocDataOnDemand.data;
    
    @Autowired
    private PartijDataOnDemand DocDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private SrtdocDataOnDemand DocDataOnDemand.srtdocDataOnDemand;
    
    public Doc DocDataOnDemand.getNewTransientDoc(int index) {
        Doc obj = new Doc();
        setAktenr(obj, index);
        setDocstatushis(obj, index);
        setIdent(obj, index);
        setOms(obj, index);
        setPartij(obj, index);
        setSrt(obj, index);
        return obj;
    }
    
    public void DocDataOnDemand.setAktenr(Doc obj, int index) {
        String aktenr = "akten_" + index;
        if (aktenr.length() > 7) {
            aktenr = aktenr.substring(0, 7);
        }
        obj.setAktenr(aktenr);
    }
    
    public void DocDataOnDemand.setDocstatushis(Doc obj, int index) {
        String docstatushis = String.valueOf(index);
        if (docstatushis.length() > 1) {
            docstatushis = docstatushis.substring(0, 1);
        }
        obj.setDocstatushis(docstatushis);
    }
    
    public void DocDataOnDemand.setIdent(Doc obj, int index) {
        String ident = "ident_" + index;
        if (ident.length() > 20) {
            ident = ident.substring(0, 20);
        }
        obj.setIdent(ident);
    }
    
    public void DocDataOnDemand.setOms(Doc obj, int index) {
        String oms = "oms_" + index;
        if (oms.length() > 80) {
            oms = oms.substring(0, 80);
        }
        obj.setOms(oms);
    }
    
    public void DocDataOnDemand.setPartij(Doc obj, int index) {
        Partij partij = partijDataOnDemand.getRandomPartij();
        obj.setPartij(partij);
    }
    
    public void DocDataOnDemand.setSrt(Doc obj, int index) {
        Srtdoc srt = srtdocDataOnDemand.getRandomSrtdoc();
        obj.setSrt(srt);
    }
    
    public Doc DocDataOnDemand.getSpecificDoc(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Doc obj = data.get(index);
        Long id = obj.getId();
        return Doc.findDoc(id);
    }
    
    public Doc DocDataOnDemand.getRandomDoc() {
        init();
        Doc obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Doc.findDoc(id);
    }
    
    public boolean DocDataOnDemand.modifyDoc(Doc obj) {
        return false;
    }
    
    public void DocDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Doc.findDocEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Doc' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Doc>();
        for (int i = 0; i < 10; i++) {
            Doc obj = getNewTransientDoc(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
