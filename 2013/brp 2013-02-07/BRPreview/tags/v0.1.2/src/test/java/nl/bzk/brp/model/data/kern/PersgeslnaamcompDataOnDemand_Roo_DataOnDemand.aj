// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Adellijketitel;
import nl.bzk.brp.model.data.kern.AdellijketitelDataOnDemand;
import nl.bzk.brp.model.data.kern.Pers;
import nl.bzk.brp.model.data.kern.PersDataOnDemand;
import nl.bzk.brp.model.data.kern.Persgeslnaamcomp;
import nl.bzk.brp.model.data.kern.PersgeslnaamcompDataOnDemand;
import nl.bzk.brp.model.data.kern.Predikaat;
import nl.bzk.brp.model.data.kern.PredikaatDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PersgeslnaamcompDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersgeslnaamcompDataOnDemand: @Component;
    
    private Random PersgeslnaamcompDataOnDemand.rnd = new SecureRandom();
    
    private List<Persgeslnaamcomp> PersgeslnaamcompDataOnDemand.data;
    
    @Autowired
    private AdellijketitelDataOnDemand PersgeslnaamcompDataOnDemand.adellijketitelDataOnDemand;
    
    @Autowired
    private PersDataOnDemand PersgeslnaamcompDataOnDemand.persDataOnDemand;
    
    @Autowired
    private PredikaatDataOnDemand PersgeslnaamcompDataOnDemand.predikaatDataOnDemand;
    
    public Persgeslnaamcomp PersgeslnaamcompDataOnDemand.getNewTransientPersgeslnaamcomp(int index) {
        Persgeslnaamcomp obj = new Persgeslnaamcomp();
        setAdellijketitel(obj, index);
        setNaam(obj, index);
        setPers(obj, index);
        setPersgeslnaamcompstatushis(obj, index);
        setPredikaat(obj, index);
        setScheidingsteken(obj, index);
        setVolgnr(obj, index);
        setVoorvoegsel(obj, index);
        return obj;
    }
    
    public void PersgeslnaamcompDataOnDemand.setAdellijketitel(Persgeslnaamcomp obj, int index) {
        Adellijketitel adellijketitel = adellijketitelDataOnDemand.getRandomAdellijketitel();
        obj.setAdellijketitel(adellijketitel);
    }
    
    public void PersgeslnaamcompDataOnDemand.setNaam(Persgeslnaamcomp obj, int index) {
        String naam = "naam_" + index;
        if (naam.length() > 200) {
            naam = naam.substring(0, 200);
        }
        obj.setNaam(naam);
    }
    
    public void PersgeslnaamcompDataOnDemand.setPers(Persgeslnaamcomp obj, int index) {
        Pers pers = persDataOnDemand.getRandomPers();
        obj.setPers(pers);
    }
    
    public void PersgeslnaamcompDataOnDemand.setPersgeslnaamcompstatushis(Persgeslnaamcomp obj, int index) {
        String persgeslnaamcompstatushis = String.valueOf(index);
        if (persgeslnaamcompstatushis.length() > 1) {
            persgeslnaamcompstatushis = persgeslnaamcompstatushis.substring(0, 1);
        }
        obj.setPersgeslnaamcompstatushis(persgeslnaamcompstatushis);
    }
    
    public void PersgeslnaamcompDataOnDemand.setPredikaat(Persgeslnaamcomp obj, int index) {
        Predikaat predikaat = predikaatDataOnDemand.getRandomPredikaat();
        obj.setPredikaat(predikaat);
    }
    
    public void PersgeslnaamcompDataOnDemand.setScheidingsteken(Persgeslnaamcomp obj, int index) {
        String scheidingsteken = String.valueOf(index);
        if (scheidingsteken.length() > 1) {
            scheidingsteken = scheidingsteken.substring(0, 1);
        }
        obj.setScheidingsteken(scheidingsteken);
    }
    
    public void PersgeslnaamcompDataOnDemand.setVolgnr(Persgeslnaamcomp obj, int index) {
        Integer volgnr = new Integer(index);
        obj.setVolgnr(volgnr);
    }
    
    public void PersgeslnaamcompDataOnDemand.setVoorvoegsel(Persgeslnaamcomp obj, int index) {
        String voorvoegsel = "voorvoeg_" + index;
        if (voorvoegsel.length() > 10) {
            voorvoegsel = voorvoegsel.substring(0, 10);
        }
        obj.setVoorvoegsel(voorvoegsel);
    }
    
    public Persgeslnaamcomp PersgeslnaamcompDataOnDemand.getSpecificPersgeslnaamcomp(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Persgeslnaamcomp obj = data.get(index);
        Long id = obj.getId();
        return Persgeslnaamcomp.findPersgeslnaamcomp(id);
    }
    
    public Persgeslnaamcomp PersgeslnaamcompDataOnDemand.getRandomPersgeslnaamcomp() {
        init();
        Persgeslnaamcomp obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Persgeslnaamcomp.findPersgeslnaamcomp(id);
    }
    
    public boolean PersgeslnaamcompDataOnDemand.modifyPersgeslnaamcomp(Persgeslnaamcomp obj) {
        return false;
    }
    
    public void PersgeslnaamcompDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Persgeslnaamcomp.findPersgeslnaamcompEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Persgeslnaamcomp' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Persgeslnaamcomp>();
        for (int i = 0; i < 10; i++) {
            Persgeslnaamcomp obj = getNewTransientPersgeslnaamcomp(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
