// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.kern;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.kern.Element;
import nl.bzk.brp.model.data.kern.ElementDataOnDemand;
import nl.bzk.brp.model.data.kern.Srtelement;
import nl.bzk.brp.model.data.kern.SrtelementDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ElementDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ElementDataOnDemand: @Component;
    
    private Random ElementDataOnDemand.rnd = new SecureRandom();
    
    private List<Element> ElementDataOnDemand.data;
    
    @Autowired
    private SrtelementDataOnDemand ElementDataOnDemand.srtelementDataOnDemand;
    
    public Element ElementDataOnDemand.getNewTransientElement(int index) {
        Element obj = new Element();
        setDataanvgel(obj, index);
        setDateindegel(obj, index);
        setNaam(obj, index);
        setOuder(obj, index);
        setSrt(obj, index);
        return obj;
    }
    
    public void ElementDataOnDemand.setDataanvgel(Element obj, int index) {
        BigDecimal dataanvgel = BigDecimal.valueOf(index);
        obj.setDataanvgel(dataanvgel);
    }
    
    public void ElementDataOnDemand.setDateindegel(Element obj, int index) {
        BigDecimal dateindegel = BigDecimal.valueOf(index);
        obj.setDateindegel(dateindegel);
    }
    
    public void ElementDataOnDemand.setNaam(Element obj, int index) {
        String naam = "naam_" + index;
        if (naam.length() > 80) {
            naam = new Random().nextInt(10) + naam.substring(1, 80);
        }
        obj.setNaam(naam);
    }
    
    public void ElementDataOnDemand.setOuder(Element obj, int index) {
        Element ouder = obj;
        obj.setOuder(ouder);
    }
    
    public void ElementDataOnDemand.setSrt(Element obj, int index) {
        Srtelement srt = srtelementDataOnDemand.getRandomSrtelement();
        obj.setSrt(srt);
    }
    
    public Element ElementDataOnDemand.getSpecificElement(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Element obj = data.get(index);
        Integer id = obj.getId();
        return Element.findElement(id);
    }
    
    public Element ElementDataOnDemand.getRandomElement() {
        init();
        Element obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Element.findElement(id);
    }
    
    public boolean ElementDataOnDemand.modifyElement(Element obj) {
        return false;
    }
    
    public void ElementDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Element.findElementEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Element' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Element>();
        for (int i = 0; i < 10; i++) {
            Element obj = getNewTransientElement(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
