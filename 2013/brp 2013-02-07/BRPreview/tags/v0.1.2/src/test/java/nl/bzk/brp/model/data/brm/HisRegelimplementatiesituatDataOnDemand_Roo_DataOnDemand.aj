// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.brm;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.brm.HisRegelimplementatiesituat;
import nl.bzk.brp.model.data.brm.HisRegelimplementatiesituatDataOnDemand;
import nl.bzk.brp.model.data.brm.Regeleffect;
import nl.bzk.brp.model.data.brm.RegeleffectDataOnDemand;
import nl.bzk.brp.model.data.brm.Regelimplementatiesituatie;
import nl.bzk.brp.model.data.brm.RegelimplementatiesituatieDataOnDemand;
import nl.bzk.brp.model.data.kern.Actie;
import nl.bzk.brp.model.data.kern.ActieDataOnDemand;
import nl.bzk.brp.model.data.kern.Rdnopschorting;
import nl.bzk.brp.model.data.kern.RdnopschortingDataOnDemand;
import nl.bzk.brp.model.data.kern.Verantwoordelijke;
import nl.bzk.brp.model.data.kern.VerantwoordelijkeDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect HisRegelimplementatiesituatDataOnDemand_Roo_DataOnDemand {
    
    declare @type: HisRegelimplementatiesituatDataOnDemand: @Component;
    
    private Random HisRegelimplementatiesituatDataOnDemand.rnd = new SecureRandom();
    
    private List<HisRegelimplementatiesituat> HisRegelimplementatiesituatDataOnDemand.data;
    
    @Autowired
    private ActieDataOnDemand HisRegelimplementatiesituatDataOnDemand.actieDataOnDemand;
    
    @Autowired
    private VerantwoordelijkeDataOnDemand HisRegelimplementatiesituatDataOnDemand.verantwoordelijkeDataOnDemand;
    
    @Autowired
    private RegeleffectDataOnDemand HisRegelimplementatiesituatDataOnDemand.regeleffectDataOnDemand;
    
    @Autowired
    private RdnopschortingDataOnDemand HisRegelimplementatiesituatDataOnDemand.rdnopschortingDataOnDemand;
    
    @Autowired
    private RegelimplementatiesituatieDataOnDemand HisRegelimplementatiesituatDataOnDemand.regelimplementatiesituatieDataOnDemand;
    
    public HisRegelimplementatiesituat HisRegelimplementatiesituatDataOnDemand.getNewTransientHisRegelimplementatiesituat(int index) {
        HisRegelimplementatiesituat obj = new HisRegelimplementatiesituat();
        setActieinh(obj, index);
        setActieverval(obj, index);
        setBijhverantwoordelijkheid(obj, index);
        setEffect(obj, index);
        setIndactief(obj, index);
        setIndopgeschort(obj, index);
        setRdnopschorting(obj, index);
        setRegelimplementatiesituatie(obj, index);
        setTsreg(obj, index);
        setTsverval(obj, index);
        return obj;
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setActieinh(HisRegelimplementatiesituat obj, int index) {
        Actie actieinh = actieDataOnDemand.getRandomActie();
        obj.setActieinh(actieinh);
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setActieverval(HisRegelimplementatiesituat obj, int index) {
        Actie actieverval = actieDataOnDemand.getRandomActie();
        obj.setActieverval(actieverval);
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setBijhverantwoordelijkheid(HisRegelimplementatiesituat obj, int index) {
        Verantwoordelijke bijhverantwoordelijkheid = verantwoordelijkeDataOnDemand.getRandomVerantwoordelijke();
        obj.setBijhverantwoordelijkheid(bijhverantwoordelijkheid);
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setEffect(HisRegelimplementatiesituat obj, int index) {
        Regeleffect effect = regeleffectDataOnDemand.getRandomRegeleffect();
        obj.setEffect(effect);
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setIndactief(HisRegelimplementatiesituat obj, int index) {
        Boolean indactief = true;
        obj.setIndactief(indactief);
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setIndopgeschort(HisRegelimplementatiesituat obj, int index) {
        Boolean indopgeschort = Boolean.TRUE;
        obj.setIndopgeschort(indopgeschort);
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setRdnopschorting(HisRegelimplementatiesituat obj, int index) {
        Rdnopschorting rdnopschorting = rdnopschortingDataOnDemand.getRandomRdnopschorting();
        obj.setRdnopschorting(rdnopschorting);
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setRegelimplementatiesituatie(HisRegelimplementatiesituat obj, int index) {
        Regelimplementatiesituatie regelimplementatiesituatie = regelimplementatiesituatieDataOnDemand.getRandomRegelimplementatiesituatie();
        obj.setRegelimplementatiesituatie(regelimplementatiesituatie);
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setTsreg(HisRegelimplementatiesituat obj, int index) {
        Date tsreg = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsreg(tsreg);
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.setTsverval(HisRegelimplementatiesituat obj, int index) {
        Date tsverval = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTsverval(tsverval);
    }
    
    public HisRegelimplementatiesituat HisRegelimplementatiesituatDataOnDemand.getSpecificHisRegelimplementatiesituat(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        HisRegelimplementatiesituat obj = data.get(index);
        Long id = obj.getId();
        return HisRegelimplementatiesituat.findHisRegelimplementatiesituat(id);
    }
    
    public HisRegelimplementatiesituat HisRegelimplementatiesituatDataOnDemand.getRandomHisRegelimplementatiesituat() {
        init();
        HisRegelimplementatiesituat obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return HisRegelimplementatiesituat.findHisRegelimplementatiesituat(id);
    }
    
    public boolean HisRegelimplementatiesituatDataOnDemand.modifyHisRegelimplementatiesituat(HisRegelimplementatiesituat obj) {
        return false;
    }
    
    public void HisRegelimplementatiesituatDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = HisRegelimplementatiesituat.findHisRegelimplementatiesituatEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'HisRegelimplementatiesituat' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<HisRegelimplementatiesituat>();
        for (int i = 0; i < 10; i++) {
            HisRegelimplementatiesituat obj = getNewTransientHisRegelimplementatiesituat(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
