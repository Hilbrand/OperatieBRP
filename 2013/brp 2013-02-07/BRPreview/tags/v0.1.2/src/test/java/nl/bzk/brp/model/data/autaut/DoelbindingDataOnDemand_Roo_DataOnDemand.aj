// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.bzk.brp.model.data.autaut;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import nl.bzk.brp.model.data.autaut.Autorisatiebesluit;
import nl.bzk.brp.model.data.autaut.AutorisatiebesluitDataOnDemand;
import nl.bzk.brp.model.data.autaut.Doelbinding;
import nl.bzk.brp.model.data.autaut.DoelbindingDataOnDemand;
import nl.bzk.brp.model.data.autaut.Protocolleringsniveau;
import nl.bzk.brp.model.data.autaut.ProtocolleringsniveauDataOnDemand;
import nl.bzk.brp.model.data.kern.Partij;
import nl.bzk.brp.model.data.kern.PartijDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DoelbindingDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DoelbindingDataOnDemand: @Component;
    
    private Random DoelbindingDataOnDemand.rnd = new SecureRandom();
    
    private List<Doelbinding> DoelbindingDataOnDemand.data;
    
    @Autowired
    private PartijDataOnDemand DoelbindingDataOnDemand.partijDataOnDemand;
    
    @Autowired
    private AutorisatiebesluitDataOnDemand DoelbindingDataOnDemand.autorisatiebesluitDataOnDemand;
    
    @Autowired
    private ProtocolleringsniveauDataOnDemand DoelbindingDataOnDemand.protocolleringsniveauDataOnDemand;
    
    public Doelbinding DoelbindingDataOnDemand.getNewTransientDoelbinding(int index) {
        Doelbinding obj = new Doelbinding();
        setDoelbindingstatushis(obj, index);
        setGeautoriseerde(obj, index);
        setIndverstrbeperkinghonoreren(obj, index);
        setLevsautorisatiebesluit(obj, index);
        setPopulatiecriterium(obj, index);
        setProtocolleringsniveau(obj, index);
        setTekstdoelbinding(obj, index);
        return obj;
    }
    
    public void DoelbindingDataOnDemand.setDoelbindingstatushis(Doelbinding obj, int index) {
        String doelbindingstatushis = String.valueOf(index);
        if (doelbindingstatushis.length() > 1) {
            doelbindingstatushis = doelbindingstatushis.substring(0, 1);
        }
        obj.setDoelbindingstatushis(doelbindingstatushis);
    }
    
    public void DoelbindingDataOnDemand.setGeautoriseerde(Doelbinding obj, int index) {
        Partij geautoriseerde = partijDataOnDemand.getRandomPartij();
        obj.setGeautoriseerde(geautoriseerde);
    }
    
    public void DoelbindingDataOnDemand.setIndverstrbeperkinghonoreren(Doelbinding obj, int index) {
        Boolean indverstrbeperkinghonoreren = Boolean.TRUE;
        obj.setIndverstrbeperkinghonoreren(indverstrbeperkinghonoreren);
    }
    
    public void DoelbindingDataOnDemand.setLevsautorisatiebesluit(Doelbinding obj, int index) {
        Autorisatiebesluit levsautorisatiebesluit = autorisatiebesluitDataOnDemand.getRandomAutorisatiebesluit();
        obj.setLevsautorisatiebesluit(levsautorisatiebesluit);
    }
    
    public void DoelbindingDataOnDemand.setPopulatiecriterium(Doelbinding obj, int index) {
        String populatiecriterium = "populatiecriterium_" + index;
        obj.setPopulatiecriterium(populatiecriterium);
    }
    
    public void DoelbindingDataOnDemand.setProtocolleringsniveau(Doelbinding obj, int index) {
        Protocolleringsniveau protocolleringsniveau = protocolleringsniveauDataOnDemand.getRandomProtocolleringsniveau();
        obj.setProtocolleringsniveau(protocolleringsniveau);
    }
    
    public void DoelbindingDataOnDemand.setTekstdoelbinding(Doelbinding obj, int index) {
        String tekstdoelbinding = "tekstdoelbinding_" + index;
        obj.setTekstdoelbinding(tekstdoelbinding);
    }
    
    public Doelbinding DoelbindingDataOnDemand.getSpecificDoelbinding(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Doelbinding obj = data.get(index);
        Integer id = obj.getId();
        return Doelbinding.findDoelbinding(id);
    }
    
    public Doelbinding DoelbindingDataOnDemand.getRandomDoelbinding() {
        init();
        Doelbinding obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Doelbinding.findDoelbinding(id);
    }
    
    public boolean DoelbindingDataOnDemand.modifyDoelbinding(Doelbinding obj) {
        return false;
    }
    
    public void DoelbindingDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Doelbinding.findDoelbindingEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Doelbinding' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Doelbinding>();
        for (int i = 0; i < 10; i++) {
            Doelbinding obj = getNewTransientDoelbinding(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
